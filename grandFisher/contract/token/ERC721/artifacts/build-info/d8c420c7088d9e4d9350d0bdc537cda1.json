{
	"id": "d8c420c7088d9e4d9350d0bdc537cda1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.5.17",
	"solcLongVersion": "0.5.17+commit.d19bba13",
	"input": {
		"language": "Solidity",
		"sources": {
			"contract/token/ERC721/ERC721.sol": {
				"content": "pragma solidity ^0.5.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../drafts/Counters.sol\";\nimport \"../../introspection/ERC165.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n    using Counters for Counters.Counter;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => Counters.Counter) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender, \"ERC721: approve to caller\");\n\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to].increment();\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner].decrement();\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from].decrement();\n        _ownedTokensCount[to].increment();\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * This function is deprecated.\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID.\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n"
			},
			"contract/introspection/ERC165.sol": {
				"content": "pragma solidity ^0.5.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the `IERC165` interface.\n *\n * Contracts may inherit from this and call `_registerInterface` to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See `IERC165.supportsInterface`.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See `IERC165.supportsInterface`.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
			},
			"contract/drafts/Counters.sol": {
				"content": "pragma solidity ^0.5.0;\n\nimport \"../math/SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
			},
			"contract/utils/Address.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n"
			},
			"contract/math/SafeMath.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n"
			},
			"contract/token/ERC721/IERC721Receiver.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a `safeTransfer`. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n"
			},
			"contract/token/ERC721/IERC721.sol": {
				"content": "pragma solidity ^0.5.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in `owner`'s account.\n     */\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * \n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either `approve` or `setApproveForAll`.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either `approve` or `setApproveForAll`.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n"
			},
			"contract/introspection/IERC165.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others (`ERC165Checker`).\n *\n * For an implementation, see `ERC165`.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contract/drafts/Counters.sol": {
				"Counters": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. * Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.",
						"methods": {},
						"title": "Counters"
					},
					"evm": {
						"assembly": "    /* \"contract/drafts/Counters.sol\":627:1386  library Counters {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"contract/drafts/Counters.sol\":627:1386  library Counters {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a723158203f5e1321a7bf43604bf616b4242bed50b3b2140fc7c38f6eeab5a35eb52e144764736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158203f5e1321a7bf43604bf616b4242bed50b3b2140fc7c38f6eeab5a35eb52e144764736f6c63430005110032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 EXTCODEHASH 0x5E SGT 0x21 0xA7 0xBF NUMBER PUSH1 0x4B 0xF6 AND 0xB4 0x24 0x2B 0xED POP 0xB3 0xB2 EQ 0xF 0xC7 0xC3 DUP16 PUSH15 0xEAB5A35EB52E144764736F6C634300 SDIV GT STOP ORIGIN ",
							"sourceMap": "627:759:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158203f5e1321a7bf43604bf616b4242bed50b3b2140fc7c38f6eeab5a35eb52e144764736f6c63430005110032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 EXTCODEHASH 0x5E SGT 0x21 0xA7 0xBF NUMBER PUSH1 0x4B 0xF6 AND 0xB4 0x24 0x2B 0xED POP 0xB3 0xB2 EQ 0xF 0xC7 0xC3 DUP16 PUSH15 0xEAB5A35EB52E144764736F6C634300 SDIV GT STOP ORIGIN ",
							"sourceMap": "627:759:0:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"current(struct Counters.Counter storage pointer)": "infinite",
								"decrement(struct Counters.Counter storage pointer)": "infinite",
								"increment(struct Counters.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 627,
									"end": 1386,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 627,
									"end": 1386,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a723158203f5e1321a7bf43604bf616b4242bed50b3b2140fc7c38f6eeab5a35eb52e144764736f6c63430005110032",
									".code": [
										{
											"begin": 627,
											"end": 1386,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 627,
											"end": 1386,
											"name": "ADDRESS"
										},
										{
											"begin": 627,
											"end": 1386,
											"name": "EQ"
										},
										{
											"begin": 627,
											"end": 1386,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 627,
											"end": 1386,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 627,
											"end": 1386,
											"name": "MSTORE"
										},
										{
											"begin": 627,
											"end": 1386,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 627,
											"end": 1386,
											"name": "DUP1"
										},
										{
											"begin": 627,
											"end": 1386,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. * Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.\",\"methods\":{},\"title\":\"Counters\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contract/drafts/Counters.sol\":\"Counters\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contract/drafts/Counters.sol\":{\"keccak256\":\"0x5eb69360d3441ab2ee799bd7c007cccbffb0896f12b2dfe1456193e2aa180a11\",\"urls\":[\"bzz-raw://072e8b5a1b5acfc2acba9b6fb87d1dc57065aad44572617ad46b014074969eb3\",\"dweb:/ipfs/QmVTDHUriaxBJqiWCWgWC8vYaYYfXSz883LsowzTx1DcpK\"]},\"contract/math/SafeMath.sol\":{\"keccak256\":\"0xd1804d04fb39689453f673601429a99a0c68c422a981fc338773df9a59180fe9\",\"urls\":[\"bzz-raw://1b9307920e0378d58c6677f8952ad090a9ecb30e878835e301a0d18386a870c1\",\"dweb:/ipfs/QmYYixTDVF4FXqFpYzEcufAwEY9BFBJ33Ew9ncsGvD7btC\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"contract/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the `IERC165` interface. * Contracts may inherit from this and call `_registerInterface` to declare their support of an interface.",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
							}
						}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the `IERC165` interface. * Contracts may inherit from this and call `_registerInterface` to declare their support of an interface.\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contract/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contract/introspection/ERC165.sol\":{\"keccak256\":\"0xac2eacd7e7762e275442f28f21d821544df5aae2ed7698af13be8c41b7005e2e\",\"urls\":[\"bzz-raw://8bdbefb642e7b08535c66bbf074e576cfef2300cdf910c1e0b211f6393833a28\",\"dweb:/ipfs/QmQhfx2Ufr8a2gFXm3KogL66xGgAuAWMwcamkWFKGG6Vya\"]},\"contract/introspection/IERC165.sol\":{\"keccak256\":\"0x661553e43d7c4fbb2de504e5999fd5c104d367488350ed5bf023031bd1ba5ac5\",\"urls\":[\"bzz-raw://b40442c5b350b57b88a081a1eacd2bac962d4ecc1f029f5447a18986f08f6f14\",\"dweb:/ipfs/QmV7wjtRf11ibUHh4g8JjuhMpy68pPhV95L2y46UBoRfsZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 60,
								"contract": "contract/introspection/ERC165.sol:ERC165",
								"label": "_supportedInterfaces",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes4,t_bool)"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes4": {
								"encoding": "inplace",
								"label": "bytes4",
								"numberOfBytes": "4"
							},
							"t_mapping(t_bytes4,t_bool)": {
								"encoding": "mapping",
								"key": "t_bytes4",
								"label": "mapping(bytes4 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"contract/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the [EIP](https://eips.ethereum.org/EIPS/eip-165). * Implementers can declare support of contract interfaces, which can then be queried by others (`ERC165Checker`). * For an implementation, see `ERC165`.",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created.     * This function call must use less than 30 000 gas."
							}
						}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the [EIP](https://eips.ethereum.org/EIPS/eip-165). * Implementers can declare support of contract interfaces, which can then be queried by others (`ERC165Checker`). * For an implementation, see `ERC165`.\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created.     * This function call must use less than 30 000 gas.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contract/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contract/introspection/IERC165.sol\":{\"keccak256\":\"0x661553e43d7c4fbb2de504e5999fd5c104d367488350ed5bf023031bd1ba5ac5\",\"urls\":[\"bzz-raw://b40442c5b350b57b88a081a1eacd2bac962d4ecc1f029f5447a18986f08f6f14\",\"dweb:/ipfs/QmV7wjtRf11ibUHh4g8JjuhMpy68pPhV95L2y46UBoRfsZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"contract/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contract/math/SafeMath.sol\":589:3528  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"contract/math/SafeMath.sol\":589:3528  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a72315820c2dac8ccf469df15143aec8b68658264d1c53d102f646b612f2b515cce24653f64736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c2dac8ccf469df15143aec8b68658264d1c53d102f646b612f2b515cce24653f64736f6c63430005110032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xC2 0xDA 0xC8 0xCC DELEGATECALL PUSH10 0xDF15143AEC8B68658264 0xD1 0xC5 RETURNDATASIZE LT 0x2F PUSH5 0x6B612F2B51 0x5C 0xCE 0x24 PUSH6 0x3F64736F6C63 NUMBER STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "589:2939:3:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c2dac8ccf469df15143aec8b68658264d1c53d102f646b612f2b515cce24653f64736f6c63430005110032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xC2 0xDA 0xC8 0xCC DELEGATECALL PUSH10 0xDF15143AEC8B68658264 0xD1 0xC5 RETURNDATASIZE LT 0x2F PUSH5 0x6B612F2B51 0x5C 0xCE 0x24 PUSH6 0x3F64736F6C63 NUMBER STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "589:2939:3:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 589,
									"end": 3528,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 589,
									"end": 3528,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a72315820c2dac8ccf469df15143aec8b68658264d1c53d102f646b612f2b515cce24653f64736f6c63430005110032",
									".code": [
										{
											"begin": 589,
											"end": 3528,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "ADDRESS"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "EQ"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "MSTORE"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "DUP1"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contract/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contract/math/SafeMath.sol\":{\"keccak256\":\"0xd1804d04fb39689453f673601429a99a0c68c422a981fc338773df9a59180fe9\",\"urls\":[\"bzz-raw://1b9307920e0378d58c6677f8952ad090a9ecb30e878835e301a0d18386a870c1\",\"dweb:/ipfs/QmYYixTDVF4FXqFpYzEcufAwEY9BFBJ33Ew9ncsGvD7btC\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"contract/token/ERC721/ERC721.sol": {
				"ERC721": {
					"abi": [
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "see https://eips.ethereum.org/EIPS/eip-721",
						"methods": {
							"approve(address,uint256)": {
								"details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
								"params": {
									"to": "address to be approved for the given token ID",
									"tokenId": "uint256 ID of the token to be approved"
								}
							},
							"balanceOf(address)": {
								"details": "Gets the balance of the specified address.",
								"params": {
									"owner": "address to query the balance of"
								},
								"return": "uint256 representing the amount owned by the passed address"
							},
							"getApproved(uint256)": {
								"details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
								"params": {
									"tokenId": "uint256 ID of the token to query the approval of"
								},
								"return": "address currently approved for the given token ID"
							},
							"isApprovedForAll(address,address)": {
								"details": "Tells whether an operator is approved by a given owner.",
								"params": {
									"operator": "operator address which you want to query the approval of",
									"owner": "owner address which you want to query the approval of"
								},
								"return": "bool whether the given operator is approved by the given owner"
							},
							"ownerOf(uint256)": {
								"details": "Gets the owner of the specified token ID.",
								"params": {
									"tokenId": "uint256 ID of the token to query the owner of"
								},
								"return": "address currently marked as the owner of the given token ID"
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
								"params": {
									"from": "current owner of the token",
									"to": "address to receive the ownership of the given token ID",
									"tokenId": "uint256 ID of the token to be transferred"
								}
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
								"params": {
									"_data": "bytes data to send along with a safe transfer check",
									"from": "current owner of the token",
									"to": "address to receive the ownership of the given token ID",
									"tokenId": "uint256 ID of the token to be transferred"
								}
							},
							"setApprovalForAll(address,bool)": {
								"details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
								"params": {
									"approved": "representing the status of the approval to be set",
									"to": "operator address to set the approval"
								}
							},
							"supportsInterface(bytes4)": {
								"details": "See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
								"params": {
									"from": "current owner of the token",
									"to": "address to receive the ownership of the given token ID",
									"tokenId": "uint256 ID of the token to be transferred"
								}
							}
						},
						"title": "ERC721 Non-Fungible Token Standard basic implementation"
					},
					"evm": {
						"assembly": "    /* \"contract/token/ERC721/ERC721.sol\":352:12453  contract ERC721 is ERC165, IERC721 {... */\n  mstore(0x40, 0x80)\n    /* \"contract/token/ERC721/ERC721.sol\":2111:2267  constructor () public {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contract/token/ERC721/ERC721.sol\":2111:2267  constructor () public {... */\n  pop\n    /* \"contract/introspection/ERC165.sol\":718:758  _registerInterface(_INTERFACE_ID_ERC165) */\n  tag_5\n    /* \"contract/introspection/ERC165.sol\":385:395  0x01ffc9a7 */\n  0x01ffc9a7\n    /* \"contract/introspection/ERC165.sol\":737:757  _INTERFACE_ID_ERC165 */\n  0xe0\n  shl\n    /* \"contract/introspection/ERC165.sol\":718:736  _registerInterface */\n  shl(0x20, tag_6)\n    /* \"contract/introspection/ERC165.sol\":718:758  _registerInterface(_INTERFACE_ID_ERC165) */\n  0x20\n  shr\n  jump\t// in\ntag_5:\n    /* \"contract/token/ERC721/ERC721.sol\":2220:2260  _registerInterface(_INTERFACE_ID_ERC721) */\n  tag_8\n    /* \"contract/token/ERC721/ERC721.sol\":2094:2104  0x80ac58cd */\n  0x80ac58cd\n    /* \"contract/token/ERC721/ERC721.sol\":2239:2259  _INTERFACE_ID_ERC721 */\n  0xe0\n  shl\n    /* \"contract/token/ERC721/ERC721.sol\":2220:2238  _registerInterface */\n  shl(0x20, tag_6)\n    /* \"contract/token/ERC721/ERC721.sol\":2220:2260  _registerInterface(_INTERFACE_ID_ERC721) */\n  0x20\n  shr\n  jump\t// in\ntag_8:\n    /* \"contract/token/ERC721/ERC721.sol\":352:12453  contract ERC721 is ERC165, IERC721 {... */\n  jump(tag_9)\n    /* \"contract/introspection/ERC165.sol\":1442:1632  function _registerInterface(bytes4 interfaceId) internal {... */\ntag_6:\n    /* \"contract/introspection/ERC165.sol\":1532:1542  0xffffffff */\n  0xffffffff\n    /* \"contract/introspection/ERC165.sol\":1517:1542  interfaceId != 0xffffffff */\n  0xe0\n  shl\n    /* \"contract/introspection/ERC165.sol\":1517:1528  interfaceId */\n  dup2\n    /* \"contract/introspection/ERC165.sol\":1517:1542  interfaceId != 0xffffffff */\n  not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n  and\n  eq\n  iszero\n    /* \"contract/introspection/ERC165.sol\":1509:1575  require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\") */\n  tag_11\n  jumpi\n  mload(0x40)\n  0x08c379a000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  dup1\n  dup1\n  0x20\n  add\n  dup3\n  dup2\n  sub\n  dup3\n  mstore\n  0x1c\n  dup2\n  mstore\n  0x20\n  add\n  dup1\n  0x4552433136353a20696e76616c696420696e7465726661636520696400000000\n  dup2\n  mstore\n  pop\n  0x20\n  add\n  swap2\n  pop\n  pop\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_11:\n    /* \"contract/introspection/ERC165.sol\":1621:1625  true */\n  0x01\n    /* \"contract/introspection/ERC165.sol\":1585:1605  _supportedInterfaces */\n  0x00\n    /* \"contract/introspection/ERC165.sol\":1585:1618  _supportedInterfaces[interfaceId] */\n  dup1\n    /* \"contract/introspection/ERC165.sol\":1606:1617  interfaceId */\n  dup4\n    /* \"contract/introspection/ERC165.sol\":1585:1618  _supportedInterfaces[interfaceId] */\n  not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n  and\n  not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n  0x00\n    /* \"contract/introspection/ERC165.sol\":1585:1625  _supportedInterfaces[interfaceId] = true */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contract/introspection/ERC165.sol\":1442:1632  function _registerInterface(bytes4 interfaceId) internal {... */\n  pop\n  jump\t// out\n    /* \"contract/token/ERC721/ERC721.sol\":352:12453  contract ERC721 is ERC165, IERC721 {... */\ntag_9:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contract/token/ERC721/ERC721.sol\":352:12453  contract ERC721 is ERC165, IERC721 {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contract/token/ERC721/ERC721.sol\":352:12453  contract ERC721 is ERC165, IERC721 {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6352211e\n      gt\n      tag_13\n      jumpi\n      dup1\n      0x6352211e\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_13:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contract/introspection/ERC165.sol\":915:1048  function supportsInterface(bytes4 interfaceId) external view returns (bool) {... */\n    tag_3:\n      tag_14\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_15\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_15:\n        /* \"contract/introspection/ERC165.sol\":915:1048  function supportsInterface(bytes4 interfaceId) external view returns (bool) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_16\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contract/token/ERC721/ERC721.sol\":4237:4437  function getApproved(uint256 tokenId) public view returns (address) {... */\n    tag_4:\n      tag_17\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_18\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_18:\n        /* \"contract/token/ERC721/ERC721.sol\":4237:4437  function getApproved(uint256 tokenId) public view returns (address) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_19\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contract/token/ERC721/ERC721.sol\":3541:3952  function approve(address to, uint256 tokenId) public {... */\n    tag_5:\n      tag_20\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_21\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_21:\n        /* \"contract/token/ERC721/ERC721.sol\":3541:3952  function approve(address to, uint256 tokenId) public {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_22\n      jump\t// in\n    tag_20:\n      stop\n        /* \"contract/token/ERC721/ERC721.sol\":5877:6162  function transferFrom(address from, address to, uint256 tokenId) public {... */\n    tag_6:\n      tag_23\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x60\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_24\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_24:\n        /* \"contract/token/ERC721/ERC721.sol\":5877:6162  function transferFrom(address from, address to, uint256 tokenId) public {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_25\n      jump\t// in\n    tag_23:\n      stop\n        /* \"contract/token/ERC721/ERC721.sol\":6795:6927  function safeTransferFrom(address from, address to, uint256 tokenId) public {... */\n    tag_7:\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x60\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_27\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_27:\n        /* \"contract/token/ERC721/ERC721.sol\":6795:6927  function safeTransferFrom(address from, address to, uint256 tokenId) public {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_28\n      jump\t// in\n    tag_26:\n      stop\n        /* \"contract/token/ERC721/ERC721.sol\":2897:3120  function ownerOf(uint256 tokenId) public view returns (address) {... */\n    tag_8:\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_30\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_30:\n        /* \"contract/token/ERC721/ERC721.sol\":2897:3120  function ownerOf(uint256 tokenId) public view returns (address) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_31\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contract/token/ERC721/ERC721.sol\":2471:2678  function balanceOf(address owner) public view returns (uint256) {... */\n    tag_9:\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_33\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_33:\n        /* \"contract/token/ERC721/ERC721.sol\":2471:2678  function balanceOf(address owner) public view returns (uint256) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_34\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contract/token/ERC721/ERC721.sol\":4730:4973  function setApprovalForAll(address to, bool approved) public {... */\n    tag_10:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_36\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_36:\n        /* \"contract/token/ERC721/ERC721.sol\":4730:4973  function setApprovalForAll(address to, bool approved) public {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      iszero\n      iszero\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_37\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contract/token/ERC721/ERC721.sol\":7632:7897  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {... */\n    tag_11:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:16   */\n      0x80\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:17   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_39\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_39:\n        /* \"contract/token/ERC721/ERC721.sol\":7632:7897  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n        /* \"--CODEGEN--\":21:32   */\n      0x0100000000\n        /* \"--CODEGEN--\":8:19   */\n      dup2\n        /* \"--CODEGEN--\":5:33   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_40\n      jumpi\n        /* \"--CODEGEN--\":46:47   */\n      0x00\n        /* \"--CODEGEN--\":43:44   */\n      dup1\n        /* \"--CODEGEN--\":36:48   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_40:\n        /* \"contract/token/ERC721/ERC721.sol\":7632:7897  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {... */\n      dup3\n      add\n        /* \"--CODEGEN--\":35:44   */\n      dup4\n        /* \"--CODEGEN--\":28:32   */\n      0x20\n        /* \"--CODEGEN--\":12:26   */\n      dup3\n        /* \"--CODEGEN--\":8:33   */\n      add\n        /* \"--CODEGEN--\":5:45   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_41\n      jumpi\n        /* \"--CODEGEN--\":58:59   */\n      0x00\n        /* \"--CODEGEN--\":55:56   */\n      dup1\n        /* \"--CODEGEN--\":48:60   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_41:\n        /* \"contract/token/ERC721/ERC721.sol\":7632:7897  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {... */\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n        /* \"--CODEGEN--\":100:109   */\n      dup5\n        /* \"--CODEGEN--\":95:96   */\n      0x01\n        /* \"--CODEGEN--\":81:93   */\n      dup4\n        /* \"--CODEGEN--\":77:97   */\n      mul\n        /* \"--CODEGEN--\":67:75   */\n      dup5\n        /* \"--CODEGEN--\":63:98   */\n      add\n        /* \"--CODEGEN--\":60:110   */\n      gt\n        /* \"--CODEGEN--\":39:50   */\n      0x0100000000\n        /* \"--CODEGEN--\":25:37   */\n      dup4\n        /* \"--CODEGEN--\":22:51   */\n      gt\n        /* \"--CODEGEN--\":11:118   */\n      or\n        /* \"--CODEGEN--\":8:10   */\n      iszero\n      tag_42\n      jumpi\n        /* \"--CODEGEN--\":131:132   */\n      0x00\n        /* \"--CODEGEN--\":128:129   */\n      dup1\n        /* \"--CODEGEN--\":121:133   */\n      revert\n        /* \"--CODEGEN--\":8:10   */\n    tag_42:\n        /* \"contract/token/ERC721/ERC721.sol\":7632:7897  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {... */\n      swap2\n      swap1\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n        /* \"--CODEGEN--\":30:33   */\n      dup1\n        /* \"--CODEGEN--\":22:28   */\n      dup3\n        /* \"--CODEGEN--\":14:20   */\n      dup5\n        /* \"--CODEGEN--\":1:34   */\n      calldatacopy\n        /* \"--CODEGEN--\":99:100   */\n      0x00\n        /* \"--CODEGEN--\":93:96   */\n      dup2\n        /* \"--CODEGEN--\":85:91   */\n      dup5\n        /* \"--CODEGEN--\":81:97   */\n      add\n        /* \"--CODEGEN--\":74:101   */\n      mstore\n        /* \"--CODEGEN--\":137:141   */\n      0x1f\n        /* \"--CODEGEN--\":133:142   */\n      not\n        /* \"--CODEGEN--\":126:130   */\n      0x1f\n        /* \"--CODEGEN--\":121:124   */\n      dup3\n        /* \"--CODEGEN--\":117:131   */\n      add\n        /* \"--CODEGEN--\":113:143   */\n      and\n        /* \"--CODEGEN--\":106:143   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":169:172   */\n      dup1\n        /* \"--CODEGEN--\":161:167   */\n      dup4\n        /* \"--CODEGEN--\":157:173   */\n      add\n        /* \"--CODEGEN--\":147:173   */\n      swap3\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":7632:7897  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      swap3\n      swap2\n      swap3\n      swap1\n      pop\n      pop\n      pop\n      tag_43\n      jump\t// in\n    tag_38:\n      stop\n        /* \"contract/token/ERC721/ERC721.sol\":5295:5440  function isApprovedForAll(address owner, address operator) public view returns (bool) {... */\n    tag_12:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_45\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_45:\n        /* \"contract/token/ERC721/ERC721.sol\":5295:5440  function isApprovedForAll(address owner, address operator) public view returns (bool) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_46\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contract/introspection/ERC165.sol\":915:1048  function supportsInterface(bytes4 interfaceId) external view returns (bool) {... */\n    tag_16:\n        /* \"contract/introspection/ERC165.sol\":985:989  bool */\n      0x00\n        /* \"contract/introspection/ERC165.sol\":1008:1028  _supportedInterfaces */\n      dup1\n        /* \"contract/introspection/ERC165.sol\":1008:1041  _supportedInterfaces[interfaceId] */\n      0x00\n        /* \"contract/introspection/ERC165.sol\":1029:1040  interfaceId */\n      dup4\n        /* \"contract/introspection/ERC165.sol\":1008:1041  _supportedInterfaces[interfaceId] */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contract/introspection/ERC165.sol\":1001:1041  return _supportedInterfaces[interfaceId] */\n      swap1\n      pop\n        /* \"contract/introspection/ERC165.sol\":915:1048  function supportsInterface(bytes4 interfaceId) external view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":4237:4437  function getApproved(uint256 tokenId) public view returns (address) {... */\n    tag_19:\n        /* \"contract/token/ERC721/ERC721.sol\":4296:4303  address */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":4323:4339  _exists(tokenId) */\n      tag_49\n        /* \"contract/token/ERC721/ERC721.sol\":4331:4338  tokenId */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":4323:4330  _exists */\n      tag_50\n        /* \"contract/token/ERC721/ERC721.sol\":4323:4339  _exists(tokenId) */\n      jump\t// in\n    tag_49:\n        /* \"contract/token/ERC721/ERC721.sol\":4315:4388  require(_exists(tokenId), \"ERC721: approved query for nonexistent token\") */\n      tag_51\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2c\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d\n      0x2c\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_51:\n        /* \"contract/token/ERC721/ERC721.sol\":4406:4421  _tokenApprovals */\n      0x02\n        /* \"contract/token/ERC721/ERC721.sol\":4406:4430  _tokenApprovals[tokenId] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":4422:4429  tokenId */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":4406:4430  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":4399:4430  return _tokenApprovals[tokenId] */\n      swap1\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":4237:4437  function getApproved(uint256 tokenId) public view returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":3541:3952  function approve(address to, uint256 tokenId) public {... */\n    tag_22:\n        /* \"contract/token/ERC721/ERC721.sol\":3604:3617  address owner */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":3620:3636  ownerOf(tokenId) */\n      tag_53\n        /* \"contract/token/ERC721/ERC721.sol\":3628:3635  tokenId */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":3620:3627  ownerOf */\n      tag_31\n        /* \"contract/token/ERC721/ERC721.sol\":3620:3636  ownerOf(tokenId) */\n      jump\t// in\n    tag_53:\n        /* \"contract/token/ERC721/ERC721.sol\":3604:3636  address owner = ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":3660:3665  owner */\n      dup1\n        /* \"contract/token/ERC721/ERC721.sol\":3654:3665  to != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":3654:3656  to */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":3654:3665  to != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contract/token/ERC721/ERC721.sol\":3646:3703  require(to != owner, \"ERC721: approval to current owner\") */\n      tag_54\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x21\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942\n      0x21\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_54:\n        /* \"contract/token/ERC721/ERC721.sol\":3736:3741  owner */\n      dup1\n        /* \"contract/token/ERC721/ERC721.sol\":3722:3741  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":3722:3732  msg.sender */\n      caller\n        /* \"contract/token/ERC721/ERC721.sol\":3722:3741  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contract/token/ERC721/ERC721.sol\":3722:3780  msg.sender == owner || isApprovedForAll(owner, msg.sender) */\n      dup1\n      tag_55\n      jumpi\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":3745:3780  isApprovedForAll(owner, msg.sender) */\n      tag_56\n        /* \"contract/token/ERC721/ERC721.sol\":3762:3767  owner */\n      dup2\n        /* \"contract/token/ERC721/ERC721.sol\":3769:3779  msg.sender */\n      caller\n        /* \"contract/token/ERC721/ERC721.sol\":3745:3761  isApprovedForAll */\n      tag_46\n        /* \"contract/token/ERC721/ERC721.sol\":3745:3780  isApprovedForAll(owner, msg.sender) */\n      jump\t// in\n    tag_56:\n        /* \"contract/token/ERC721/ERC721.sol\":3722:3780  msg.sender == owner || isApprovedForAll(owner, msg.sender) */\n    tag_55:\n        /* \"contract/token/ERC721/ERC721.sol\":3714:3862  require(msg.sender == owner || isApprovedForAll(owner, msg.sender),... */\n      tag_57\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x38\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d\n      0x38\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_57:\n        /* \"contract/token/ERC721/ERC721.sol\":3900:3902  to */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":3873:3888  _tokenApprovals */\n      0x02\n        /* \"contract/token/ERC721/ERC721.sol\":3873:3897  _tokenApprovals[tokenId] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":3889:3896  tokenId */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":3873:3897  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":3873:3902  _tokenApprovals[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":3937:3944  tokenId */\n      dup2\n        /* \"contract/token/ERC721/ERC721.sol\":3933:3935  to */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":3917:3945  Approval(owner, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":3926:3931  owner */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":3917:3945  Approval(owner, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"contract/token/ERC721/ERC721.sol\":3541:3952  function approve(address to, uint256 tokenId) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":5877:6162  function transferFrom(address from, address to, uint256 tokenId) public {... */\n    tag_25:\n        /* \"contract/token/ERC721/ERC721.sol\":6019:6058  _isApprovedOrOwner(msg.sender, tokenId) */\n      tag_59\n        /* \"contract/token/ERC721/ERC721.sol\":6038:6048  msg.sender */\n      caller\n        /* \"contract/token/ERC721/ERC721.sol\":6050:6057  tokenId */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":6019:6037  _isApprovedOrOwner */\n      tag_60\n        /* \"contract/token/ERC721/ERC721.sol\":6019:6058  _isApprovedOrOwner(msg.sender, tokenId) */\n      jump\t// in\n    tag_59:\n        /* \"contract/token/ERC721/ERC721.sol\":6011:6112  require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\") */\n      tag_61\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x31\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2\n      0x31\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_61:\n        /* \"contract/token/ERC721/ERC721.sol\":6123:6155  _transferFrom(from, to, tokenId) */\n      tag_62\n        /* \"contract/token/ERC721/ERC721.sol\":6137:6141  from */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":6143:6145  to */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":6147:6154  tokenId */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":6123:6136  _transferFrom */\n      tag_63\n        /* \"contract/token/ERC721/ERC721.sol\":6123:6155  _transferFrom(from, to, tokenId) */\n      jump\t// in\n    tag_62:\n        /* \"contract/token/ERC721/ERC721.sol\":5877:6162  function transferFrom(address from, address to, uint256 tokenId) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":6795:6927  function safeTransferFrom(address from, address to, uint256 tokenId) public {... */\n    tag_28:\n        /* \"contract/token/ERC721/ERC721.sol\":6881:6920  safeTransferFrom(from, to, tokenId, \"\") */\n      tag_65\n        /* \"contract/token/ERC721/ERC721.sol\":6898:6902  from */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":6904:6906  to */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":6908:6915  tokenId */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":6881:6920  safeTransferFrom(from, to, tokenId, \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":6881:6897  safeTransferFrom */\n      tag_43\n        /* \"contract/token/ERC721/ERC721.sol\":6881:6920  safeTransferFrom(from, to, tokenId, \"\") */\n      jump\t// in\n    tag_65:\n        /* \"contract/token/ERC721/ERC721.sol\":6795:6927  function safeTransferFrom(address from, address to, uint256 tokenId) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":2897:3120  function ownerOf(uint256 tokenId) public view returns (address) {... */\n    tag_31:\n        /* \"contract/token/ERC721/ERC721.sol\":2952:2959  address */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":2971:2984  address owner */\n      dup1\n        /* \"contract/token/ERC721/ERC721.sol\":2987:2998  _tokenOwner */\n      0x01\n        /* \"contract/token/ERC721/ERC721.sol\":2987:3007  _tokenOwner[tokenId] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":2999:3006  tokenId */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":2987:3007  _tokenOwner[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":2971:3007  address owner = _tokenOwner[tokenId] */\n      swap1\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":3042:3043  0 */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":3025:3044  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":3025:3030  owner */\n      dup2\n        /* \"contract/token/ERC721/ERC721.sol\":3025:3044  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contract/token/ERC721/ERC721.sol\":3017:3090  require(owner != address(0), \"ERC721: owner query for nonexistent token\") */\n      tag_67\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x29\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397\n      0x29\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_67:\n        /* \"contract/token/ERC721/ERC721.sol\":3108:3113  owner */\n      dup1\n        /* \"contract/token/ERC721/ERC721.sol\":3101:3113  return owner */\n      swap2\n      pop\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":2897:3120  function ownerOf(uint256 tokenId) public view returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":2471:2678  function balanceOf(address owner) public view returns (uint256) {... */\n    tag_34:\n        /* \"contract/token/ERC721/ERC721.sol\":2526:2533  uint256 */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":2570:2571  0 */\n      dup1\n        /* \"contract/token/ERC721/ERC721.sol\":2553:2572  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":2553:2558  owner */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":2553:2572  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contract/token/ERC721/ERC721.sol\":2545:2619  require(owner != address(0), \"ERC721: balance query for the zero address\") */\n      tag_69\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba\n      0x2a\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_69:\n        /* \"contract/token/ERC721/ERC721.sol\":2637:2671  _ownedTokensCount[owner].current() */\n      tag_70\n        /* \"contract/token/ERC721/ERC721.sol\":2637:2654  _ownedTokensCount */\n      0x03\n        /* \"contract/token/ERC721/ERC721.sol\":2637:2661  _ownedTokensCount[owner] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":2655:2660  owner */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":2637:2661  _ownedTokensCount[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contract/token/ERC721/ERC721.sol\":2637:2669  _ownedTokensCount[owner].current */\n      tag_71\n        /* \"contract/token/ERC721/ERC721.sol\":2637:2671  _ownedTokensCount[owner].current() */\n      jump\t// in\n    tag_70:\n        /* \"contract/token/ERC721/ERC721.sol\":2630:2671  return _ownedTokensCount[owner].current() */\n      swap1\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":2471:2678  function balanceOf(address owner) public view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":4730:4973  function setApprovalForAll(address to, bool approved) public {... */\n    tag_37:\n        /* \"contract/token/ERC721/ERC721.sol\":4815:4825  msg.sender */\n      caller\n        /* \"contract/token/ERC721/ERC721.sol\":4809:4825  to != msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":4809:4811  to */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":4809:4825  to != msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contract/token/ERC721/ERC721.sol\":4801:4855  require(to != msg.sender, \"ERC721: approve to caller\") */\n      tag_73\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x19\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4552433732313a20617070726f766520746f2063616c6c657200000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_73:\n        /* \"contract/token/ERC721/ERC721.sol\":4903:4911  approved */\n      dup1\n        /* \"contract/token/ERC721/ERC721.sol\":4866:4884  _operatorApprovals */\n      0x04\n        /* \"contract/token/ERC721/ERC721.sol\":4866:4896  _operatorApprovals[msg.sender] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":4885:4895  msg.sender */\n      caller\n        /* \"contract/token/ERC721/ERC721.sol\":4866:4896  _operatorApprovals[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contract/token/ERC721/ERC721.sol\":4866:4900  _operatorApprovals[msg.sender][to] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":4897:4899  to */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":4866:4900  _operatorApprovals[msg.sender][to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":4866:4911  _operatorApprovals[msg.sender][to] = approved */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":4953:4955  to */\n      dup2\n        /* \"contract/token/ERC721/ERC721.sol\":4926:4966  ApprovalForAll(msg.sender, to, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":4941:4951  msg.sender */\n      caller\n        /* \"contract/token/ERC721/ERC721.sol\":4926:4966  ApprovalForAll(msg.sender, to, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n        /* \"contract/token/ERC721/ERC721.sol\":4957:4965  approved */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":4926:4966  ApprovalForAll(msg.sender, to, approved) */\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contract/token/ERC721/ERC721.sol\":4730:4973  function setApprovalForAll(address to, bool approved) public {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":7632:7897  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {... */\n    tag_43:\n        /* \"contract/token/ERC721/ERC721.sol\":7738:7769  transferFrom(from, to, tokenId) */\n      tag_75\n        /* \"contract/token/ERC721/ERC721.sol\":7751:7755  from */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":7757:7759  to */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":7761:7768  tokenId */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":7738:7750  transferFrom */\n      tag_25\n        /* \"contract/token/ERC721/ERC721.sol\":7738:7769  transferFrom(from, to, tokenId) */\n      jump\t// in\n    tag_75:\n        /* \"contract/token/ERC721/ERC721.sol\":7787:7835  _checkOnERC721Received(from, to, tokenId, _data) */\n      tag_76\n        /* \"contract/token/ERC721/ERC721.sol\":7810:7814  from */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":7816:7818  to */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":7820:7827  tokenId */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":7829:7834  _data */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":7787:7809  _checkOnERC721Received */\n      tag_77\n        /* \"contract/token/ERC721/ERC721.sol\":7787:7835  _checkOnERC721Received(from, to, tokenId, _data) */\n      jump\t// in\n    tag_76:\n        /* \"contract/token/ERC721/ERC721.sol\":7779:7890  require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\") */\n      tag_78\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x32\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e\n      0x32\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_78:\n        /* \"contract/token/ERC721/ERC721.sol\":7632:7897  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":5295:5440  function isApprovedForAll(address owner, address operator) public view returns (bool) {... */\n    tag_46:\n        /* \"contract/token/ERC721/ERC721.sol\":5375:5379  bool */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":5398:5416  _operatorApprovals */\n      0x04\n        /* \"contract/token/ERC721/ERC721.sol\":5398:5423  _operatorApprovals[owner] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":5417:5422  owner */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":5398:5423  _operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contract/token/ERC721/ERC721.sol\":5398:5433  _operatorApprovals[owner][operator] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":5424:5432  operator */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":5398:5433  _operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":5391:5433  return _operatorApprovals[owner][operator] */\n      swap1\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":5295:5440  function isApprovedForAll(address owner, address operator) public view returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":8092:8244  function _exists(uint256 tokenId) internal view returns (bool) {... */\n    tag_50:\n        /* \"contract/token/ERC721/ERC721.sol\":8149:8153  bool */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":8165:8178  address owner */\n      dup1\n        /* \"contract/token/ERC721/ERC721.sol\":8181:8192  _tokenOwner */\n      0x01\n        /* \"contract/token/ERC721/ERC721.sol\":8181:8201  _tokenOwner[tokenId] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":8193:8200  tokenId */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":8181:8201  _tokenOwner[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":8165:8201  address owner = _tokenOwner[tokenId] */\n      swap1\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":8235:8236  0 */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":8218:8237  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":8218:8223  owner */\n      dup2\n        /* \"contract/token/ERC721/ERC721.sol\":8218:8237  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contract/token/ERC721/ERC721.sol\":8211:8237  return owner != address(0) */\n      swap2\n      pop\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":8092:8244  function _exists(uint256 tokenId) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":8605:8934  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {... */\n    tag_60:\n        /* \"contract/token/ERC721/ERC721.sol\":8690:8694  bool */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":8714:8730  _exists(tokenId) */\n      tag_82\n        /* \"contract/token/ERC721/ERC721.sol\":8722:8729  tokenId */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":8714:8721  _exists */\n      tag_50\n        /* \"contract/token/ERC721/ERC721.sol\":8714:8730  _exists(tokenId) */\n      jump\t// in\n    tag_82:\n        /* \"contract/token/ERC721/ERC721.sol\":8706:8779  require(_exists(tokenId), \"ERC721: operator query for nonexistent token\") */\n      tag_83\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2c\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c\n      0x2c\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_83:\n        /* \"contract/token/ERC721/ERC721.sol\":8789:8802  address owner */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":8805:8821  ownerOf(tokenId) */\n      tag_84\n        /* \"contract/token/ERC721/ERC721.sol\":8813:8820  tokenId */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":8805:8812  ownerOf */\n      tag_31\n        /* \"contract/token/ERC721/ERC721.sol\":8805:8821  ownerOf(tokenId) */\n      jump\t// in\n    tag_84:\n        /* \"contract/token/ERC721/ERC721.sol\":8789:8821  address owner = ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":8850:8855  owner */\n      dup1\n        /* \"contract/token/ERC721/ERC721.sol\":8839:8855  spender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":8839:8846  spender */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":8839:8855  spender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contract/token/ERC721/ERC721.sol\":8839:8890  spender == owner || getApproved(tokenId) == spender */\n      dup1\n      tag_85\n      jumpi\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":8883:8890  spender */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":8859:8890  getApproved(tokenId) == spender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":8859:8879  getApproved(tokenId) */\n      tag_86\n        /* \"contract/token/ERC721/ERC721.sol\":8871:8878  tokenId */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":8859:8870  getApproved */\n      tag_19\n        /* \"contract/token/ERC721/ERC721.sol\":8859:8879  getApproved(tokenId) */\n      jump\t// in\n    tag_86:\n        /* \"contract/token/ERC721/ERC721.sol\":8859:8890  getApproved(tokenId) == spender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contract/token/ERC721/ERC721.sol\":8839:8890  spender == owner || getApproved(tokenId) == spender */\n    tag_85:\n        /* \"contract/token/ERC721/ERC721.sol\":8839:8926  spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender) */\n      dup1\n      tag_87\n      jumpi\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":8894:8926  isApprovedForAll(owner, spender) */\n      tag_88\n        /* \"contract/token/ERC721/ERC721.sol\":8911:8916  owner */\n      dup2\n        /* \"contract/token/ERC721/ERC721.sol\":8918:8925  spender */\n      dup6\n        /* \"contract/token/ERC721/ERC721.sol\":8894:8910  isApprovedForAll */\n      tag_46\n        /* \"contract/token/ERC721/ERC721.sol\":8894:8926  isApprovedForAll(owner, spender) */\n      jump\t// in\n    tag_88:\n        /* \"contract/token/ERC721/ERC721.sol\":8839:8926  spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender) */\n    tag_87:\n        /* \"contract/token/ERC721/ERC721.sol\":8831:8927  return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender)) */\n      swap2\n      pop\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":8605:8934  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":10751:11198  function _transferFrom(address from, address to, uint256 tokenId) internal {... */\n    tag_63:\n        /* \"contract/token/ERC721/ERC721.sol\":10864:10868  from */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":10844:10868  ownerOf(tokenId) == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":10844:10860  ownerOf(tokenId) */\n      tag_90\n        /* \"contract/token/ERC721/ERC721.sol\":10852:10859  tokenId */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":10844:10851  ownerOf */\n      tag_31\n        /* \"contract/token/ERC721/ERC721.sol\":10844:10860  ownerOf(tokenId) */\n      jump\t// in\n    tag_90:\n        /* \"contract/token/ERC721/ERC721.sol\":10844:10868  ownerOf(tokenId) == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contract/token/ERC721/ERC721.sol\":10836:10914  require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\") */\n      tag_91\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x29\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950\n      0x29\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_91:\n        /* \"contract/token/ERC721/ERC721.sol\":10946:10947  0 */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":10932:10948  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":10932:10934  to */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":10932:10948  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contract/token/ERC721/ERC721.sol\":10924:10989  require(to != address(0), \"ERC721: transfer to the zero address\") */\n      tag_92\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4\n      0x24\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_92:\n        /* \"contract/token/ERC721/ERC721.sol\":11000:11023  _clearApproval(tokenId) */\n      tag_93\n        /* \"contract/token/ERC721/ERC721.sol\":11015:11022  tokenId */\n      dup2\n        /* \"contract/token/ERC721/ERC721.sol\":11000:11014  _clearApproval */\n      tag_94\n        /* \"contract/token/ERC721/ERC721.sol\":11000:11023  _clearApproval(tokenId) */\n      jump\t// in\n    tag_93:\n        /* \"contract/token/ERC721/ERC721.sol\":11034:11069  _ownedTokensCount[from].decrement() */\n      tag_95\n        /* \"contract/token/ERC721/ERC721.sol\":11034:11051  _ownedTokensCount */\n      0x03\n        /* \"contract/token/ERC721/ERC721.sol\":11034:11057  _ownedTokensCount[from] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":11052:11056  from */\n      dup6\n        /* \"contract/token/ERC721/ERC721.sol\":11034:11057  _ownedTokensCount[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contract/token/ERC721/ERC721.sol\":11034:11067  _ownedTokensCount[from].decrement */\n      tag_96\n        /* \"contract/token/ERC721/ERC721.sol\":11034:11069  _ownedTokensCount[from].decrement() */\n      jump\t// in\n    tag_95:\n        /* \"contract/token/ERC721/ERC721.sol\":11079:11112  _ownedTokensCount[to].increment() */\n      tag_97\n        /* \"contract/token/ERC721/ERC721.sol\":11079:11096  _ownedTokensCount */\n      0x03\n        /* \"contract/token/ERC721/ERC721.sol\":11079:11100  _ownedTokensCount[to] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":11097:11099  to */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":11079:11100  _ownedTokensCount[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contract/token/ERC721/ERC721.sol\":11079:11110  _ownedTokensCount[to].increment */\n      tag_98\n        /* \"contract/token/ERC721/ERC721.sol\":11079:11112  _ownedTokensCount[to].increment() */\n      jump\t// in\n    tag_97:\n        /* \"contract/token/ERC721/ERC721.sol\":11146:11148  to */\n      dup2\n        /* \"contract/token/ERC721/ERC721.sol\":11123:11134  _tokenOwner */\n      0x01\n        /* \"contract/token/ERC721/ERC721.sol\":11123:11143  _tokenOwner[tokenId] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":11135:11142  tokenId */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":11123:11143  _tokenOwner[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":11123:11148  _tokenOwner[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":11183:11190  tokenId */\n      dup1\n        /* \"contract/token/ERC721/ERC721.sol\":11179:11181  to */\n      dup3\n        /* \"contract/token/ERC721/ERC721.sol\":11164:11191  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":11173:11177  from */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":11164:11191  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"contract/token/ERC721/ERC721.sol\":10751:11198  function _transferFrom(address from, address to, uint256 tokenId) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contract/drafts/Counters.sol\":1063:1175  function current(Counter storage counter) internal view returns (uint256) {... */\n    tag_71:\n        /* \"contract/drafts/Counters.sol\":1128:1135  uint256 */\n      0x00\n        /* \"contract/drafts/Counters.sol\":1154:1161  counter */\n      dup2\n        /* \"contract/drafts/Counters.sol\":1154:1168  counter._value */\n      0x00\n      add\n      sload\n        /* \"contract/drafts/Counters.sol\":1147:1168  return counter._value */\n      swap1\n      pop\n        /* \"contract/drafts/Counters.sol\":1063:1175  function current(Counter storage counter) internal view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":11771:12118  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)... */\n    tag_77:\n        /* \"contract/token/ERC721/ERC721.sol\":11892:11896  bool */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":11917:11932  to.isContract() */\n      tag_101\n        /* \"contract/token/ERC721/ERC721.sol\":11917:11919  to */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":11917:11930  to.isContract */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_102\n        /* \"contract/token/ERC721/ERC721.sol\":11917:11932  to.isContract() */\n      jump\t// in\n    tag_101:\n        /* \"contract/token/ERC721/ERC721.sol\":11912:11970  if (!to.isContract()) {... */\n      tag_103\n      jumpi\n        /* \"contract/token/ERC721/ERC721.sol\":11955:11959  true */\n      0x01\n        /* \"contract/token/ERC721/ERC721.sol\":11948:11959  return true */\n      swap1\n      pop\n      jump(tag_100)\n        /* \"contract/token/ERC721/ERC721.sol\":11912:11970  if (!to.isContract()) {... */\n    tag_103:\n        /* \"contract/token/ERC721/ERC721.sol\":11980:11993  bytes4 retval */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":12012:12014  to */\n      dup5\n        /* \"contract/token/ERC721/ERC721.sol\":11996:12032  IERC721Receiver(to).onERC721Received */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x150b7a02\n        /* \"contract/token/ERC721/ERC721.sol\":12033:12043  msg.sender */\n      caller\n        /* \"contract/token/ERC721/ERC721.sol\":12045:12049  from */\n      dup9\n        /* \"contract/token/ERC721/ERC721.sol\":12051:12058  tokenId */\n      dup8\n        /* \"contract/token/ERC721/ERC721.sol\":12060:12065  _data */\n      dup8\n        /* \"contract/token/ERC721/ERC721.sol\":11996:12066  IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) */\n      mload(0x40)\n      dup6\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup6\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_104:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_106\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_104)\n    tag_106:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":11996:12066  IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_107\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_107:\n      pop\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_108\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_108:\n        /* \"contract/token/ERC721/ERC721.sol\":11996:12066  IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_109\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_109:\n        /* \"contract/token/ERC721/ERC721.sol\":11996:12066  IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_110\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_110:\n        /* \"contract/token/ERC721/ERC721.sol\":11996:12066  IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":11980:12066  bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) */\n      swap1\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":713:723  0x150b7a02 */\n      0x150b7a02\n        /* \"contract/token/ERC721/ERC721.sol\":12094:12110  _ERC721_RECEIVED */\n      0xe0\n      shl\n        /* \"contract/token/ERC721/ERC721.sol\":12084:12110  retval == _ERC721_RECEIVED */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":12084:12090  retval */\n      dup2\n        /* \"contract/token/ERC721/ERC721.sol\":12084:12110  retval == _ERC721_RECEIVED */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"contract/token/ERC721/ERC721.sol\":12076:12111  return (retval == _ERC721_RECEIVED) */\n      swap2\n      pop\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":11771:12118  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)... */\n    tag_100:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contract/token/ERC721/ERC721.sol\":12280:12451  function _clearApproval(uint256 tokenId) private {... */\n    tag_94:\n        /* \"contract/token/ERC721/ERC721.sol\":12379:12380  0 */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":12343:12381  _tokenApprovals[tokenId] != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":12343:12358  _tokenApprovals */\n      0x02\n        /* \"contract/token/ERC721/ERC721.sol\":12343:12367  _tokenApprovals[tokenId] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":12359:12366  tokenId */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":12343:12367  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contract/token/ERC721/ERC721.sol\":12343:12381  _tokenApprovals[tokenId] != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contract/token/ERC721/ERC721.sol\":12339:12445  if (_tokenApprovals[tokenId] != address(0)) {... */\n      tag_112\n      jumpi\n        /* \"contract/token/ERC721/ERC721.sol\":12432:12433  0 */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":12397:12412  _tokenApprovals */\n      0x02\n        /* \"contract/token/ERC721/ERC721.sol\":12397:12421  _tokenApprovals[tokenId] */\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":12413:12420  tokenId */\n      dup4\n        /* \"contract/token/ERC721/ERC721.sol\":12397:12421  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contract/token/ERC721/ERC721.sol\":12397:12434  _tokenApprovals[tokenId] = address(0) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contract/token/ERC721/ERC721.sol\":12339:12445  if (_tokenApprovals[tokenId] != address(0)) {... */\n    tag_112:\n        /* \"contract/token/ERC721/ERC721.sol\":12280:12451  function _clearApproval(uint256 tokenId) private {... */\n      pop\n      jump\t// out\n        /* \"contract/drafts/Counters.sol\":1276:1384  function decrement(Counter storage counter) internal {... */\n    tag_96:\n        /* \"contract/drafts/Counters.sol\":1356:1377  counter._value.sub(1) */\n      tag_114\n        /* \"contract/drafts/Counters.sol\":1375:1376  1 */\n      0x01\n        /* \"contract/drafts/Counters.sol\":1356:1363  counter */\n      dup3\n        /* \"contract/drafts/Counters.sol\":1356:1370  counter._value */\n      0x00\n      add\n      sload\n        /* \"contract/drafts/Counters.sol\":1356:1374  counter._value.sub */\n      tag_115\n      swap1\n        /* \"contract/drafts/Counters.sol\":1356:1377  counter._value.sub(1) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_114:\n        /* \"contract/drafts/Counters.sol\":1339:1346  counter */\n      dup2\n        /* \"contract/drafts/Counters.sol\":1339:1353  counter._value */\n      0x00\n      add\n        /* \"contract/drafts/Counters.sol\":1339:1377  counter._value = counter._value.sub(1) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contract/drafts/Counters.sol\":1276:1384  function decrement(Counter storage counter) internal {... */\n      pop\n      jump\t// out\n        /* \"contract/drafts/Counters.sol\":1181:1270  function increment(Counter storage counter) internal {... */\n    tag_98:\n        /* \"contract/drafts/Counters.sol\":1262:1263  1 */\n      0x01\n        /* \"contract/drafts/Counters.sol\":1244:1251  counter */\n      dup2\n        /* \"contract/drafts/Counters.sol\":1244:1258  counter._value */\n      0x00\n      add\n      0x00\n        /* \"contract/drafts/Counters.sol\":1244:1263  counter._value += 1 */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contract/drafts/Counters.sol\":1181:1270  function increment(Counter storage counter) internal {... */\n      pop\n      jump\t// out\n        /* \"contract/utils/Address.sol\":542:955  function isContract(address account) internal view returns (bool) {... */\n    tag_102:\n        /* \"contract/utils/Address.sol\":602:606  bool */\n      0x00\n        /* \"contract/utils/Address.sol\":805:817  uint256 size */\n      dup1\n        /* \"contract/utils/Address.sol\":914:921  account */\n      dup3\n        /* \"contract/utils/Address.sol\":902:922  extcodesize(account) */\n      extcodesize\n        /* \"contract/utils/Address.sol\":894:922  size := extcodesize(account) */\n      swap1\n      pop\n        /* \"contract/utils/Address.sol\":947:948  0 */\n      0x00\n        /* \"contract/utils/Address.sol\":940:944  size */\n      dup2\n        /* \"contract/utils/Address.sol\":940:948  size > 0 */\n      gt\n        /* \"contract/utils/Address.sol\":933:948  return size > 0 */\n      swap2\n      pop\n      pop\n        /* \"contract/utils/Address.sol\":542:955  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contract/math/SafeMath.sol\":1274:1453  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_115:\n        /* \"contract/math/SafeMath.sol\":1332:1339  uint256 */\n      0x00\n        /* \"contract/math/SafeMath.sol\":1364:1365  a */\n      dup3\n        /* \"contract/math/SafeMath.sol\":1359:1360  b */\n      dup3\n        /* \"contract/math/SafeMath.sol\":1359:1365  b <= a */\n      gt\n      iszero\n        /* \"contract/math/SafeMath.sol\":1351:1400  require(b <= a, \"SafeMath: subtraction overflow\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"contract/math/SafeMath.sol\":1410:1419  uint256 c */\n      0x00\n        /* \"contract/math/SafeMath.sol\":1426:1427  b */\n      dup3\n        /* \"contract/math/SafeMath.sol\":1422:1423  a */\n      dup5\n        /* \"contract/math/SafeMath.sol\":1422:1427  a - b */\n      sub\n        /* \"contract/math/SafeMath.sol\":1410:1427  uint256 c = a - b */\n      swap1\n      pop\n        /* \"contract/math/SafeMath.sol\":1445:1446  c */\n      dup1\n        /* \"contract/math/SafeMath.sol\":1438:1446  return c */\n      swap2\n      pop\n      pop\n        /* \"contract/math/SafeMath.sol\":1274:1453  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    stop\n    data_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e 4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572\n    data_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4 4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373\n    data_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c 4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e\n    data_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d 4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c\n    data_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba 4552433732313a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373\n    data_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397 4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e\n    data_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d 4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e\n    data_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950 4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e\n    data_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942 4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572\n    data_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2 4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564\n\n    auxdata: 0xa265627a7a72315820e8a92e9b74f4aa204db2de127f555d670ca251349761a39cfa2842a85c4dbfb064736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506100276301ffc9a760e01b61004260201b60201c565b61003d6380ac58cd60e01b61004260201b60201c565b61014a565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156100de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61161b806101596000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80636352211e116100665780636352211e146102a057806370a082311461030e578063a22cb46514610366578063b88d4fde146103b6578063e985e9c5146104bb5761009e565b806301ffc9a7146100a3578063081812fc14610108578063095ea7b31461017657806323b872dd146101c457806342842e0e14610232575b600080fd5b6100ee600480360360208110156100b957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610537565b604051808215151515815260200191505060405180910390f35b6101346004803603602081101561011e57600080fd5b810190808035906020019092919050505061059e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101c26004803603604081101561018c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610639565b005b610230600480360360608110156101da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610812565b005b61029e6004803603606081101561024857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610881565b005b6102cc600480360360208110156102b657600080fd5b81019080803590602001909291905050506108a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103506004803603602081101561032457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610969565b6040518082815260200191505060405180910390f35b6103b46004803603604081101561037c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610a3e565b005b6104b9600480360360808110156103cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561043357600080fd5b82018360208201111561044557600080fd5b8035906020019184600183028401116401000000008311171561046757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610be1565b005b61051d600480360360408110156104d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c53565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b60006105a982610ce7565b6105fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180611540602c913960400191505060405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610644826108a1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806115956021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061070b575061070a8133610c53565b5b610760576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806114b56038913960400191505060405180910390fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61081c3382610d59565b610871576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806115b66031913960400191505060405180910390fd5b61087c838383610e4d565b505050565b61089c83838360405180602001604052806000815250610be1565b505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610960576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806115176029913960400191505060405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806114ed602a913960400191505060405180910390fd5b610a37600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206110a8565b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ae0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b610bec848484610812565b610bf8848484846110b6565b610c4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806114336032913960400191505060405180910390fd5b50505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000610d6482610ce7565b610db9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180611489602c913960400191505060405180910390fd5b6000610dc4836108a1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610e3357508373ffffffffffffffffffffffffffffffffffffffff16610e1b8461059e565b73ffffffffffffffffffffffffffffffffffffffff16145b80610e445750610e438185610c53565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e6d826108a1565b73ffffffffffffffffffffffffffffffffffffffff1614610ed9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061156c6029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f5f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806114656024913960400191505060405180910390fd5b610f688161129f565b610faf600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061135d565b610ff6600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611380565b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600081600001549050919050565b60006110d78473ffffffffffffffffffffffffffffffffffffffff16611396565b6110e45760019050611297565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111bf5780820151818401526020810190506111a4565b50505050905090810190601f1680156111ec5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561120e57600080fd5b505af1158015611222573d6000803e3d6000fd5b505050506040513d602081101561123857600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461135a5760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b611375600182600001546113a990919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b600080823b905060008111915050919050565b600082821115611421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a265627a7a72315820e8a92e9b74f4aa204db2de127f555d670ca251349761a39cfa2842a85c4dbfb064736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x42 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x3D PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH2 0x42 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x14A JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO PUSH2 0xDE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4552433136353A20696E76616C696420696E7465726661636520696400000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP4 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x161B DUP1 PUSH2 0x159 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4BB JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C4 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x232 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x537 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x59E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x639 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x812 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x881 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x350 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x969 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA3E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4B9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x445 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0xBE1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x51D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A9 DUP3 PUSH2 0xCE7 JUMP JUMPDEST PUSH2 0x5FE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1540 PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x644 DUP3 PUSH2 0x8A1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1595 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x70B JUMPI POP PUSH2 0x70A DUP2 CALLER PUSH2 0xC53 JUMP JUMPDEST JUMPDEST PUSH2 0x760 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x38 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x14B5 PUSH1 0x38 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x81C CALLER DUP3 PUSH2 0xD59 JUMP JUMPDEST PUSH2 0x871 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x15B6 PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x87C DUP4 DUP4 DUP4 PUSH2 0xE4D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x89C DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xBE1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x960 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1517 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x9F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x14ED PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA37 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x10A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xBEC DUP5 DUP5 DUP5 PUSH2 0x812 JUMP JUMPDEST PUSH2 0xBF8 DUP5 DUP5 DUP5 DUP5 PUSH2 0x10B6 JUMP JUMPDEST PUSH2 0xC4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1433 PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD64 DUP3 PUSH2 0xCE7 JUMP JUMPDEST PUSH2 0xDB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1489 PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDC4 DUP4 PUSH2 0x8A1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xE33 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE1B DUP5 PUSH2 0x59E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0xE44 JUMPI POP PUSH2 0xE43 DUP2 DUP6 PUSH2 0xC53 JUMP JUMPDEST JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE6D DUP3 PUSH2 0x8A1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xED9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x156C PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1465 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF68 DUP2 PUSH2 0x129F JUMP JUMPDEST PUSH2 0xFAF PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x135D JUMP JUMPDEST PUSH2 0xFF6 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1380 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10D7 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x10E4 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 CALLER DUP9 DUP8 DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11BF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x11A4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x11EC JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x120E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1222 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x135A JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1375 PUSH1 0x1 DUP3 PUSH1 0x0 ADD SLOAD PUSH2 0x13A9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1421 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F206E6F6E20455243373231 MSTORE PUSH6 0x636569766572 KECCAK256 PUSH10 0x6D706C656D656E746572 GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH16 0x70657261746F7220717565727920666F PUSH19 0x206E6F6E6578697374656E7420746F6B656E45 MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F76652063616C6C6572206973206E6F74206F PUSH24 0x6E6572206E6F7220617070726F76656420666F7220616C6C GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH3 0x616C61 PUSH15 0x636520717565727920666F72207468 PUSH6 0x207A65726F20 PUSH2 0x6464 PUSH19 0x6573734552433732313A206F776E6572207175 PUSH6 0x727920666F72 KECCAK256 PUSH15 0x6F6E6578697374656E7420746F6B65 PUSH15 0x4552433732313A20617070726F7665 PUSH5 0x2071756572 PUSH26 0x20666F72206E6F6E6578697374656E7420746F6B656E45524337 ORIGIN BALANCE GASPRICE KECCAK256 PUSH21 0x72616E73666572206F6620746F6B656E2074686174 KECCAK256 PUSH10 0x73206E6F74206F776E45 MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F76616C20746F2063757272656E74206F776E PUSH6 0x724552433732 BALANCE GASPRICE KECCAK256 PUSH21 0x72616E736665722063616C6C6572206973206E6F74 KECCAK256 PUSH16 0x776E6572206E6F7220617070726F7665 PUSH5 0xA265627A7A PUSH19 0x315820E8A92E9B74F4AA204DB2DE127F555D67 0xC LOG2 MLOAD CALLVALUE SWAP8 PUSH2 0xA39C STATICCALL 0x28 TIMESTAMP 0xA8 0x5C 0x4D 0xBF 0xB0 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "352:12101:4:-;;;2111:156;8:9:-1;5:2;;;30:1;27;20:12;5:2;2111:156:4;718:40:1;385:10;737:20;;718:18;;;:40;;:::i;:::-;2220::4;2094:10;2239:20;;2220:18;;;:40;;:::i;:::-;352:12101;;1442:190:1;1532:10;1517:25;;:11;:25;;;;;1509:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1621:4;1585:20;:33;1606:11;1585:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;1442:190;:::o;352:12101:4:-;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061009e5760003560e01c80636352211e116100665780636352211e146102a057806370a082311461030e578063a22cb46514610366578063b88d4fde146103b6578063e985e9c5146104bb5761009e565b806301ffc9a7146100a3578063081812fc14610108578063095ea7b31461017657806323b872dd146101c457806342842e0e14610232575b600080fd5b6100ee600480360360208110156100b957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610537565b604051808215151515815260200191505060405180910390f35b6101346004803603602081101561011e57600080fd5b810190808035906020019092919050505061059e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101c26004803603604081101561018c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610639565b005b610230600480360360608110156101da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610812565b005b61029e6004803603606081101561024857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610881565b005b6102cc600480360360208110156102b657600080fd5b81019080803590602001909291905050506108a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103506004803603602081101561032457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610969565b6040518082815260200191505060405180910390f35b6103b46004803603604081101561037c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610a3e565b005b6104b9600480360360808110156103cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561043357600080fd5b82018360208201111561044557600080fd5b8035906020019184600183028401116401000000008311171561046757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610be1565b005b61051d600480360360408110156104d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c53565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b60006105a982610ce7565b6105fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180611540602c913960400191505060405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610644826108a1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806115956021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061070b575061070a8133610c53565b5b610760576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806114b56038913960400191505060405180910390fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61081c3382610d59565b610871576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806115b66031913960400191505060405180910390fd5b61087c838383610e4d565b505050565b61089c83838360405180602001604052806000815250610be1565b505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610960576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806115176029913960400191505060405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806114ed602a913960400191505060405180910390fd5b610a37600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206110a8565b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ae0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b610bec848484610812565b610bf8848484846110b6565b610c4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806114336032913960400191505060405180910390fd5b50505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000610d6482610ce7565b610db9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180611489602c913960400191505060405180910390fd5b6000610dc4836108a1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610e3357508373ffffffffffffffffffffffffffffffffffffffff16610e1b8461059e565b73ffffffffffffffffffffffffffffffffffffffff16145b80610e445750610e438185610c53565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e6d826108a1565b73ffffffffffffffffffffffffffffffffffffffff1614610ed9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061156c6029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f5f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806114656024913960400191505060405180910390fd5b610f688161129f565b610faf600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061135d565b610ff6600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611380565b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600081600001549050919050565b60006110d78473ffffffffffffffffffffffffffffffffffffffff16611396565b6110e45760019050611297565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111bf5780820151818401526020810190506111a4565b50505050905090810190601f1680156111ec5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561120e57600080fd5b505af1158015611222573d6000803e3d6000fd5b505050506040513d602081101561123857600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461135a5760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b611375600182600001546113a990919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b600080823b905060008111915050919050565b600082821115611421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a265627a7a72315820e8a92e9b74f4aa204db2de127f555d670ca251349761a39cfa2842a85c4dbfb064736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4BB JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C4 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x232 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x537 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x59E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x639 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x812 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x881 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x350 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x969 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA3E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4B9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x445 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0xBE1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x51D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A9 DUP3 PUSH2 0xCE7 JUMP JUMPDEST PUSH2 0x5FE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1540 PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x644 DUP3 PUSH2 0x8A1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1595 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x70B JUMPI POP PUSH2 0x70A DUP2 CALLER PUSH2 0xC53 JUMP JUMPDEST JUMPDEST PUSH2 0x760 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x38 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x14B5 PUSH1 0x38 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x81C CALLER DUP3 PUSH2 0xD59 JUMP JUMPDEST PUSH2 0x871 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x15B6 PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x87C DUP4 DUP4 DUP4 PUSH2 0xE4D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x89C DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xBE1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x960 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1517 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x9F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x14ED PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA37 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x10A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xBEC DUP5 DUP5 DUP5 PUSH2 0x812 JUMP JUMPDEST PUSH2 0xBF8 DUP5 DUP5 DUP5 DUP5 PUSH2 0x10B6 JUMP JUMPDEST PUSH2 0xC4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1433 PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD64 DUP3 PUSH2 0xCE7 JUMP JUMPDEST PUSH2 0xDB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1489 PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDC4 DUP4 PUSH2 0x8A1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xE33 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE1B DUP5 PUSH2 0x59E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0xE44 JUMPI POP PUSH2 0xE43 DUP2 DUP6 PUSH2 0xC53 JUMP JUMPDEST JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE6D DUP3 PUSH2 0x8A1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xED9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x156C PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1465 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF68 DUP2 PUSH2 0x129F JUMP JUMPDEST PUSH2 0xFAF PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x135D JUMP JUMPDEST PUSH2 0xFF6 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1380 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10D7 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x10E4 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x1297 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 CALLER DUP9 DUP8 DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11BF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x11A4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x11EC JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x120E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1222 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x135A JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1375 PUSH1 0x1 DUP3 PUSH1 0x0 ADD SLOAD PUSH2 0x13A9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1421 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F206E6F6E20455243373231 MSTORE PUSH6 0x636569766572 KECCAK256 PUSH10 0x6D706C656D656E746572 GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH16 0x70657261746F7220717565727920666F PUSH19 0x206E6F6E6578697374656E7420746F6B656E45 MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F76652063616C6C6572206973206E6F74206F PUSH24 0x6E6572206E6F7220617070726F76656420666F7220616C6C GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH3 0x616C61 PUSH15 0x636520717565727920666F72207468 PUSH6 0x207A65726F20 PUSH2 0x6464 PUSH19 0x6573734552433732313A206F776E6572207175 PUSH6 0x727920666F72 KECCAK256 PUSH15 0x6F6E6578697374656E7420746F6B65 PUSH15 0x4552433732313A20617070726F7665 PUSH5 0x2071756572 PUSH26 0x20666F72206E6F6E6578697374656E7420746F6B656E45524337 ORIGIN BALANCE GASPRICE KECCAK256 PUSH21 0x72616E73666572206F6620746F6B656E2074686174 KECCAK256 PUSH10 0x73206E6F74206F776E45 MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F76616C20746F2063757272656E74206F776E PUSH6 0x724552433732 BALANCE GASPRICE KECCAK256 PUSH21 0x72616E736665722063616C6C6572206973206E6F74 KECCAK256 PUSH16 0x776E6572206E6F7220617070726F7665 PUSH5 0xA265627A7A PUSH19 0x315820E8A92E9B74F4AA204DB2DE127F555D67 0xC LOG2 MLOAD CALLVALUE SWAP8 PUSH2 0xA39C STATICCALL 0x28 TIMESTAMP 0xA8 0x5C 0x4D 0xBF 0xB0 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "352:12101:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;352:12101:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;915:133:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;915:133:1;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4237:200:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4237:200:4;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3541:411;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3541:411:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5877:285;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5877:285:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6795:132;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6795:132:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2897:223;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2897:223:4;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2471:207;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2471:207:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4730:243;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4730:243:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7632:265;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;7632:265:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7632:265:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7632:265:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7632:265:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7632:265:4;;;;;;;;;;;;;;;:::i;:::-;;5295:145;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5295:145:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;915:133:1;985:4;1008:20;:33;1029:11;1008:33;;;;;;;;;;;;;;;;;;;;;;;;;;;1001:40;;915:133;;;:::o;4237:200:4:-;4296:7;4323:16;4331:7;4323;:16::i;:::-;4315:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4406:15;:24;4422:7;4406:24;;;;;;;;;;;;;;;;;;;;;4399:31;;4237:200;;;:::o;3541:411::-;3604:13;3620:16;3628:7;3620;:16::i;:::-;3604:32;;3660:5;3654:11;;:2;:11;;;;3646:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3736:5;3722:19;;:10;:19;;;:58;;;;3745:35;3762:5;3769:10;3745:16;:35::i;:::-;3722:58;3714:148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3900:2;3873:15;:24;3889:7;3873:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;3937:7;3933:2;3917:28;;3926:5;3917:28;;;;;;;;;;;;3541:411;;;:::o;5877:285::-;6019:39;6038:10;6050:7;6019:18;:39::i;:::-;6011:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6123:32;6137:4;6143:2;6147:7;6123:13;:32::i;:::-;5877:285;;;:::o;6795:132::-;6881:39;6898:4;6904:2;6908:7;6881:39;;;;;;;;;;;;:16;:39::i;:::-;6795:132;;;:::o;2897:223::-;2952:7;2971:13;2987:11;:20;2999:7;2987:20;;;;;;;;;;;;;;;;;;;;;2971:36;;3042:1;3025:19;;:5;:19;;;;3017:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3108:5;3101:12;;;2897:223;;;:::o;2471:207::-;2526:7;2570:1;2553:19;;:5;:19;;;;2545:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2637:34;:17;:24;2655:5;2637:24;;;;;;;;;;;;;;;:32;:34::i;:::-;2630:41;;2471:207;;;:::o;4730:243::-;4815:10;4809:16;;:2;:16;;;;4801:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4903:8;4866:18;:30;4885:10;4866:30;;;;;;;;;;;;;;;:34;4897:2;4866:34;;;;;;;;;;;;;;;;:45;;;;;;;;;;;;;;;;;;4953:2;4926:40;;4941:10;4926:40;;;4957:8;4926:40;;;;;;;;;;;;;;;;;;;;;;4730:243;;:::o;7632:265::-;7738:31;7751:4;7757:2;7761:7;7738:12;:31::i;:::-;7787:48;7810:4;7816:2;7820:7;7829:5;7787:22;:48::i;:::-;7779:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7632:265;;;;:::o;5295:145::-;5375:4;5398:18;:25;5417:5;5398:25;;;;;;;;;;;;;;;:35;5424:8;5398:35;;;;;;;;;;;;;;;;;;;;;;;;;5391:42;;5295:145;;;;:::o;8092:152::-;8149:4;8165:13;8181:11;:20;8193:7;8181:20;;;;;;;;;;;;;;;;;;;;;8165:36;;8235:1;8218:19;;:5;:19;;;;8211:26;;;8092:152;;;:::o;8605:329::-;8690:4;8714:16;8722:7;8714;:16::i;:::-;8706:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8789:13;8805:16;8813:7;8805;:16::i;:::-;8789:32;;8850:5;8839:16;;:7;:16;;;:51;;;;8883:7;8859:31;;:20;8871:7;8859:11;:20::i;:::-;:31;;;8839:51;:87;;;;8894:32;8911:5;8918:7;8894:16;:32::i;:::-;8839:87;8831:96;;;8605:329;;;;:::o;10751:447::-;10864:4;10844:24;;:16;10852:7;10844;:16::i;:::-;:24;;;10836:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10946:1;10932:16;;:2;:16;;;;10924:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11000:23;11015:7;11000:14;:23::i;:::-;11034:35;:17;:23;11052:4;11034:23;;;;;;;;;;;;;;;:33;:35::i;:::-;11079:33;:17;:21;11097:2;11079:21;;;;;;;;;;;;;;;:31;:33::i;:::-;11146:2;11123:11;:20;11135:7;11123:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;11183:7;11179:2;11164:27;;11173:4;11164:27;;;;;;;;;;;;10751:447;;;:::o;1063:112:0:-;1128:7;1154;:14;;;1147:21;;1063:112;;;:::o;11771:347:4:-;11892:4;11917:15;:2;:13;;;:15::i;:::-;11912:58;;11955:4;11948:11;;;;11912:58;11980:13;12012:2;11996:36;;;12033:10;12045:4;12051:7;12060:5;11996:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11996:70:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11996:70:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11996:70:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11996:70:4;;;;;;;;;;;;;;;;11980:86;;713:10;12094:16;;12084:26;;;:6;:26;;;;12076:35;;;11771:347;;;;;;;:::o;12280:171::-;12379:1;12343:38;;:15;:24;12359:7;12343:24;;;;;;;;;;;;;;;;;;;;;:38;;;12339:106;;12432:1;12397:15;:24;12413:7;12397:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;12339:106;12280:171;:::o;1276:108:0:-;1356:21;1375:1;1356:7;:14;;;:18;;:21;;;;:::i;:::-;1339:7;:14;;:38;;;;1276:108;:::o;1181:89::-;1262:1;1244:7;:14;;;:19;;;;;;;;;;;1181:89;:::o;542:413:7:-;602:4;805:12;914:7;902:20;894:28;;947:1;940:4;:8;933:15;;;542:413;;;:::o;1274:179:3:-;1332:7;1364:1;1359;:6;;1351:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1410:9;1426:1;1422;:5;1410:17;;1445:1;1438:8;;;1274:179;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1131800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "infinite",
								"getApproved(uint256)": "infinite",
								"isApprovedForAll(address,address)": "1457",
								"ownerOf(uint256)": "infinite",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "23242",
								"supportsInterface(bytes4)": "1254",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_burn(address,uint256)": "infinite",
								"_burn(uint256)": "infinite",
								"_checkOnERC721Received(address,address,uint256,bytes memory)": "infinite",
								"_clearApproval(uint256)": "21911",
								"_exists(uint256)": "982",
								"_isApprovedOrOwner(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_transferFrom(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 352,
									"end": 12453,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "MSTORE"
								},
								{
									"begin": 2111,
									"end": 2267,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 2111,
									"end": 2267,
									"name": "POP"
								},
								{
									"begin": 718,
									"end": 758,
									"name": "PUSH [tag]",
									"value": "5"
								},
								{
									"begin": 385,
									"end": 395,
									"name": "PUSH",
									"value": "1FFC9A7"
								},
								{
									"begin": 737,
									"end": 757,
									"name": "PUSH",
									"value": "E0"
								},
								{
									"begin": 737,
									"end": 757,
									"name": "SHL"
								},
								{
									"begin": 718,
									"end": 736,
									"name": "PUSH [tag]",
									"value": "6"
								},
								{
									"begin": 718,
									"end": 736,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 718,
									"end": 736,
									"name": "SHL"
								},
								{
									"begin": 718,
									"end": 758,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 718,
									"end": 758,
									"name": "SHR"
								},
								{
									"begin": 718,
									"end": 758,
									"name": "JUMP",
									"value": "[in]"
								},
								{
									"begin": 718,
									"end": 758,
									"name": "tag",
									"value": "5"
								},
								{
									"begin": 718,
									"end": 758,
									"name": "JUMPDEST"
								},
								{
									"begin": 2220,
									"end": 2260,
									"name": "PUSH [tag]",
									"value": "8"
								},
								{
									"begin": 2094,
									"end": 2104,
									"name": "PUSH",
									"value": "80AC58CD"
								},
								{
									"begin": 2239,
									"end": 2259,
									"name": "PUSH",
									"value": "E0"
								},
								{
									"begin": 2239,
									"end": 2259,
									"name": "SHL"
								},
								{
									"begin": 2220,
									"end": 2238,
									"name": "PUSH [tag]",
									"value": "6"
								},
								{
									"begin": 2220,
									"end": 2238,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 2220,
									"end": 2238,
									"name": "SHL"
								},
								{
									"begin": 2220,
									"end": 2260,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 2220,
									"end": 2260,
									"name": "SHR"
								},
								{
									"begin": 2220,
									"end": 2260,
									"name": "JUMP",
									"value": "[in]"
								},
								{
									"begin": 2220,
									"end": 2260,
									"name": "tag",
									"value": "8"
								},
								{
									"begin": 2220,
									"end": 2260,
									"name": "JUMPDEST"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "PUSH [tag]",
									"value": "9"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "JUMP"
								},
								{
									"begin": 1442,
									"end": 1632,
									"name": "tag",
									"value": "6"
								},
								{
									"begin": 1442,
									"end": 1632,
									"name": "JUMPDEST"
								},
								{
									"begin": 1532,
									"end": 1542,
									"name": "PUSH",
									"value": "FFFFFFFF"
								},
								{
									"begin": 1517,
									"end": 1542,
									"name": "PUSH",
									"value": "E0"
								},
								{
									"begin": 1517,
									"end": 1542,
									"name": "SHL"
								},
								{
									"begin": 1517,
									"end": 1528,
									"name": "DUP2"
								},
								{
									"begin": 1517,
									"end": 1542,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1517,
									"end": 1542,
									"name": "NOT"
								},
								{
									"begin": 1517,
									"end": 1542,
									"name": "AND"
								},
								{
									"begin": 1517,
									"end": 1542,
									"name": "EQ"
								},
								{
									"begin": 1517,
									"end": 1542,
									"name": "ISZERO"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "PUSH [tag]",
									"value": "11"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "JUMPI"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "MLOAD"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "PUSH",
									"value": "8C379A000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "DUP2"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "MSTORE"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "PUSH",
									"value": "4"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "ADD"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "DUP1"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "DUP1"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "ADD"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "DUP3"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "DUP2"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "SUB"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "DUP3"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "MSTORE"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "PUSH",
									"value": "1C"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "DUP2"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "MSTORE"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "ADD"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "DUP1"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "PUSH",
									"value": "4552433136353A20696E76616C696420696E7465726661636520696400000000"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "DUP2"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "MSTORE"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "POP"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "ADD"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "SWAP2"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "POP"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "POP"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "MLOAD"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "DUP1"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "SWAP2"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "SUB"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "SWAP1"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "REVERT"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "tag",
									"value": "11"
								},
								{
									"begin": 1509,
									"end": 1575,
									"name": "JUMPDEST"
								},
								{
									"begin": 1621,
									"end": 1625,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 1585,
									"end": 1605,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "DUP1"
								},
								{
									"begin": 1606,
									"end": 1617,
									"name": "DUP4"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "NOT"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "AND"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "NOT"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "AND"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "DUP2"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "MSTORE"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "ADD"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "SWAP1"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "DUP2"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "MSTORE"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "ADD"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "KECCAK256"
								},
								{
									"begin": 1585,
									"end": 1618,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "EXP"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "DUP2"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "SLOAD"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "DUP2"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "PUSH",
									"value": "FF"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "MUL"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "NOT"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "AND"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "SWAP1"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "DUP4"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "ISZERO"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "ISZERO"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "MUL"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "OR"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "SWAP1"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "SSTORE"
								},
								{
									"begin": 1585,
									"end": 1625,
									"name": "POP"
								},
								{
									"begin": 1442,
									"end": 1632,
									"name": "POP"
								},
								{
									"begin": 1442,
									"end": 1632,
									"name": "JUMP",
									"value": "[out]"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "tag",
									"value": "9"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "JUMPDEST"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "DUP1"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "CODECOPY"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 352,
									"end": 12453,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a72315820e8a92e9b74f4aa204db2de127f555d670ca251349761a39cfa2842a85c4dbfb064736f6c63430005110032",
									".code": [
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "MSTORE"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "POP"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "LT"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "SHR"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "6352211E"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "GT"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "6352211E"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "EQ"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "70A08231"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "EQ"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "A22CB465"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "EQ"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "B88D4FDE"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "EQ"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "E985E9C5"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "EQ"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMP"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPDEST"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "1FFC9A7"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "EQ"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "81812FC"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "EQ"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "95EA7B3"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "EQ"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "23B872DD"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "EQ"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "42842E0E"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "EQ"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPI"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "JUMPDEST"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "DUP1"
										},
										{
											"begin": 352,
											"end": 12453,
											"name": "REVERT"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "JUMPDEST"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "DUP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "DUP2"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "ADD"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "DUP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "DUP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "NOT"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "AND"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "ADD"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP3"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP2"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "POP"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "POP"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "POP"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "JUMPDEST"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "MLOAD"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "DUP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "DUP3"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "ISZERO"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "ISZERO"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "ISZERO"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "ISZERO"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "DUP2"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "MSTORE"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "ADD"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP2"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "POP"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "POP"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "MLOAD"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "DUP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP2"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SUB"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "RETURN"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "JUMPDEST"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "DUP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "DUP2"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "ADD"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "DUP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "DUP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "ADD"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP3"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP2"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "POP"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "POP"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "POP"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "JUMPDEST"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "MLOAD"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "DUP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "DUP3"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "AND"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "AND"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "DUP2"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "MSTORE"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "ADD"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP2"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "POP"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "POP"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "MLOAD"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "DUP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP2"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SUB"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "RETURN"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "JUMPDEST"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "DUP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "DUP2"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "ADD"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "DUP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "DUP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "AND"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "ADD"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP3"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP2"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "DUP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "ADD"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP3"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP2"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "SWAP1"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "POP"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "POP"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "POP"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "JUMPDEST"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "STOP"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "JUMPDEST"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "DUP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "DUP2"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "ADD"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "DUP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "DUP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "AND"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "ADD"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP3"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP2"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "DUP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "AND"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "ADD"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP3"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP2"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "DUP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "ADD"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP3"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP2"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "SWAP1"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "POP"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "POP"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "POP"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "JUMPDEST"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "STOP"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "JUMPDEST"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "PUSH [tag]",
											"value": "26"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "DUP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "27"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "27"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "DUP2"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "ADD"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "DUP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "DUP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "AND"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "ADD"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP3"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP2"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "DUP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "AND"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "ADD"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP3"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP2"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "DUP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "ADD"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP3"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP2"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "SWAP1"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "POP"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "POP"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "POP"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "tag",
											"value": "26"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "JUMPDEST"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "STOP"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "JUMPDEST"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "PUSH [tag]",
											"value": "29"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "DUP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "DUP2"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "ADD"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "DUP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "DUP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "ADD"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP3"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP2"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "POP"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "POP"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "POP"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "tag",
											"value": "29"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "JUMPDEST"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "MLOAD"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "DUP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "DUP3"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "AND"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "AND"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "DUP2"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "MSTORE"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "ADD"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP2"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "POP"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "POP"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "MLOAD"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "DUP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP2"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SUB"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "RETURN"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "JUMPDEST"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "DUP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "33"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "33"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "DUP2"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "ADD"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "DUP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "DUP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "AND"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "ADD"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP3"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP2"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "POP"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "POP"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "POP"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "tag",
											"value": "32"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "JUMPDEST"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "MLOAD"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "DUP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "DUP3"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "DUP2"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "MSTORE"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "ADD"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP2"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "POP"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "POP"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "MLOAD"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "DUP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP2"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SUB"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "RETURN"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "JUMPDEST"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "PUSH [tag]",
											"value": "35"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "DUP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "36"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "DUP2"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "ADD"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "DUP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "DUP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "AND"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "ADD"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP3"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP2"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "DUP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "ISZERO"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "ISZERO"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "ADD"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP3"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP2"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "SWAP1"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "POP"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "POP"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "POP"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "tag",
											"value": "35"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "JUMPDEST"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "STOP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "JUMPDEST"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH [tag]",
											"value": "38"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 16,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 17,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "39"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "39"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "AND"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP3"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "AND"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP3"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP3"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 21,
											"end": 32,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 8,
											"end": 19,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "40"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 46,
											"end": 47,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 43,
											"end": 44,
											"name": "DUP1"
										},
										{
											"begin": 36,
											"end": 48,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "40"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP3"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 35,
											"end": 44,
											"name": "DUP4"
										},
										{
											"begin": 28,
											"end": 32,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "DUP3"
										},
										{
											"begin": 8,
											"end": 33,
											"name": "ADD"
										},
										{
											"begin": 5,
											"end": 45,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "41"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 58,
											"end": 59,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 55,
											"end": 56,
											"name": "DUP1"
										},
										{
											"begin": 48,
											"end": 60,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "41"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP2"
										},
										{
											"begin": 100,
											"end": 109,
											"name": "DUP5"
										},
										{
											"begin": 95,
											"end": 96,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 81,
											"end": 93,
											"name": "DUP4"
										},
										{
											"begin": 77,
											"end": 97,
											"name": "MUL"
										},
										{
											"begin": 67,
											"end": 75,
											"name": "DUP5"
										},
										{
											"begin": 63,
											"end": 98,
											"name": "ADD"
										},
										{
											"begin": 60,
											"end": 110,
											"name": "GT"
										},
										{
											"begin": 39,
											"end": 50,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 25,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 22,
											"end": 51,
											"name": "GT"
										},
										{
											"begin": 11,
											"end": 118,
											"name": "OR"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPI"
										},
										{
											"begin": 131,
											"end": 132,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 128,
											"end": 129,
											"name": "DUP1"
										},
										{
											"begin": 121,
											"end": 133,
											"name": "REVERT"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "tag",
											"value": "42"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPDEST"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DIV"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "MUL"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "MLOAD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "MSTORE"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP4"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP3"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "MSTORE"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "ADD"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP4"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 33,
											"name": "DUP1"
										},
										{
											"begin": 22,
											"end": 28,
											"name": "DUP3"
										},
										{
											"begin": 14,
											"end": 20,
											"name": "DUP5"
										},
										{
											"begin": 1,
											"end": 34,
											"name": "CALLDATACOPY"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 93,
											"end": 96,
											"name": "DUP2"
										},
										{
											"begin": 85,
											"end": 91,
											"name": "DUP5"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "ADD"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "MSTORE"
										},
										{
											"begin": 137,
											"end": 141,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 133,
											"end": 142,
											"name": "NOT"
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 121,
											"end": 124,
											"name": "DUP3"
										},
										{
											"begin": 117,
											"end": 131,
											"name": "ADD"
										},
										{
											"begin": 113,
											"end": 143,
											"name": "AND"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "SWAP1"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "POP"
										},
										{
											"begin": 169,
											"end": 172,
											"name": "DUP1"
										},
										{
											"begin": 161,
											"end": 167,
											"name": "DUP4"
										},
										{
											"begin": 157,
											"end": 173,
											"name": "ADD"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "SWAP3"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP3"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP2"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP3"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "SWAP1"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "PUSH [tag]",
											"value": "43"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "tag",
											"value": "38"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "JUMPDEST"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "STOP"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "JUMPDEST"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "PUSH [tag]",
											"value": "44"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "DUP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "45"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "45"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "DUP2"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "ADD"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "DUP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "DUP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "AND"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "ADD"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP3"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP2"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "DUP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "AND"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "ADD"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP3"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP2"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "POP"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "POP"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "POP"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "PUSH [tag]",
											"value": "46"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "tag",
											"value": "44"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "JUMPDEST"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "MLOAD"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "DUP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "DUP3"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "ISZERO"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "ISZERO"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "ISZERO"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "ISZERO"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "DUP2"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "MSTORE"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "ADD"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP2"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "POP"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "POP"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "MLOAD"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "DUP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP2"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SUB"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP1"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "RETURN"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "JUMPDEST"
										},
										{
											"begin": 985,
											"end": 989,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1008,
											"end": 1028,
											"name": "DUP1"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1029,
											"end": 1040,
											"name": "DUP4"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "NOT"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "AND"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "NOT"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "AND"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "DUP2"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "MSTORE"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "ADD"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "SWAP1"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "DUP2"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "MSTORE"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "ADD"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "KECCAK256"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "SWAP1"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "SLOAD"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "SWAP1"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "EXP"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "SWAP1"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "DIV"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 1008,
											"end": 1041,
											"name": "AND"
										},
										{
											"begin": 1001,
											"end": 1041,
											"name": "SWAP1"
										},
										{
											"begin": 1001,
											"end": 1041,
											"name": "POP"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP2"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "SWAP1"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "POP"
										},
										{
											"begin": 915,
											"end": 1048,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "JUMPDEST"
										},
										{
											"begin": 4296,
											"end": 4303,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4323,
											"end": 4339,
											"name": "PUSH [tag]",
											"value": "49"
										},
										{
											"begin": 4331,
											"end": 4338,
											"name": "DUP3"
										},
										{
											"begin": 4323,
											"end": 4330,
											"name": "PUSH [tag]",
											"value": "50"
										},
										{
											"begin": 4323,
											"end": 4339,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4323,
											"end": 4339,
											"name": "tag",
											"value": "49"
										},
										{
											"begin": 4323,
											"end": 4339,
											"name": "JUMPDEST"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH [tag]",
											"value": "51"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "JUMPI"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "MLOAD"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "DUP2"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "MSTORE"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "ADD"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "DUP1"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "DUP1"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "ADD"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "DUP3"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "DUP2"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "SUB"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "DUP3"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "MSTORE"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH",
											"value": "2C"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "DUP2"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "MSTORE"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "ADD"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "DUP1"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH data",
											"value": "9291E0F44949204F2E9B40E6BE090924979D6047B2365868F4E9F027722EB89D"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH",
											"value": "2C"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "SWAP2"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "CODECOPY"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "ADD"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "SWAP2"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "POP"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "POP"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "MLOAD"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "DUP1"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "SWAP2"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "SUB"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "SWAP1"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "REVERT"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "tag",
											"value": "51"
										},
										{
											"begin": 4315,
											"end": 4388,
											"name": "JUMPDEST"
										},
										{
											"begin": 4406,
											"end": 4421,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4422,
											"end": 4429,
											"name": "DUP4"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "DUP2"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "MSTORE"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "ADD"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "SWAP1"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "DUP2"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "MSTORE"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "ADD"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "KECCAK256"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "SWAP1"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "SLOAD"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "SWAP1"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "EXP"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "SWAP1"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "DIV"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4406,
											"end": 4430,
											"name": "AND"
										},
										{
											"begin": 4399,
											"end": 4430,
											"name": "SWAP1"
										},
										{
											"begin": 4399,
											"end": 4430,
											"name": "POP"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP2"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "SWAP1"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "POP"
										},
										{
											"begin": 4237,
											"end": 4437,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "JUMPDEST"
										},
										{
											"begin": 3604,
											"end": 3617,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3620,
											"end": 3636,
											"name": "PUSH [tag]",
											"value": "53"
										},
										{
											"begin": 3628,
											"end": 3635,
											"name": "DUP3"
										},
										{
											"begin": 3620,
											"end": 3627,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 3620,
											"end": 3636,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3620,
											"end": 3636,
											"name": "tag",
											"value": "53"
										},
										{
											"begin": 3620,
											"end": 3636,
											"name": "JUMPDEST"
										},
										{
											"begin": 3604,
											"end": 3636,
											"name": "SWAP1"
										},
										{
											"begin": 3604,
											"end": 3636,
											"name": "POP"
										},
										{
											"begin": 3660,
											"end": 3665,
											"name": "DUP1"
										},
										{
											"begin": 3654,
											"end": 3665,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3654,
											"end": 3665,
											"name": "AND"
										},
										{
											"begin": 3654,
											"end": 3656,
											"name": "DUP4"
										},
										{
											"begin": 3654,
											"end": 3665,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3654,
											"end": 3665,
											"name": "AND"
										},
										{
											"begin": 3654,
											"end": 3665,
											"name": "EQ"
										},
										{
											"begin": 3654,
											"end": 3665,
											"name": "ISZERO"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH [tag]",
											"value": "54"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "JUMPI"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "MLOAD"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "DUP2"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "MSTORE"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "ADD"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "DUP1"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "DUP1"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "ADD"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "DUP3"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "DUP2"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "SUB"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "DUP3"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "MSTORE"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH",
											"value": "21"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "DUP2"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "MSTORE"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "ADD"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "DUP1"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH data",
											"value": "B51B4875EEDE07862961E8F9365C6749F5FE55C6EE5D7A9E42B6912AD0B15942"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH",
											"value": "21"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "SWAP2"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "CODECOPY"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "ADD"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "SWAP2"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "POP"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "POP"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "MLOAD"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "DUP1"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "SWAP2"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "SUB"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "SWAP1"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "REVERT"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "tag",
											"value": "54"
										},
										{
											"begin": 3646,
											"end": 3703,
											"name": "JUMPDEST"
										},
										{
											"begin": 3736,
											"end": 3741,
											"name": "DUP1"
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "AND"
										},
										{
											"begin": 3722,
											"end": 3732,
											"name": "CALLER"
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "AND"
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "EQ"
										},
										{
											"begin": 3722,
											"end": 3780,
											"name": "DUP1"
										},
										{
											"begin": 3722,
											"end": 3780,
											"name": "PUSH [tag]",
											"value": "55"
										},
										{
											"begin": 3722,
											"end": 3780,
											"name": "JUMPI"
										},
										{
											"begin": 3722,
											"end": 3780,
											"name": "POP"
										},
										{
											"begin": 3745,
											"end": 3780,
											"name": "PUSH [tag]",
											"value": "56"
										},
										{
											"begin": 3762,
											"end": 3767,
											"name": "DUP2"
										},
										{
											"begin": 3769,
											"end": 3779,
											"name": "CALLER"
										},
										{
											"begin": 3745,
											"end": 3761,
											"name": "PUSH [tag]",
											"value": "46"
										},
										{
											"begin": 3745,
											"end": 3780,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3780,
											"name": "tag",
											"value": "56"
										},
										{
											"begin": 3745,
											"end": 3780,
											"name": "JUMPDEST"
										},
										{
											"begin": 3722,
											"end": 3780,
											"name": "tag",
											"value": "55"
										},
										{
											"begin": 3722,
											"end": 3780,
											"name": "JUMPDEST"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH [tag]",
											"value": "57"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "JUMPI"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "MLOAD"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "DUP2"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "MSTORE"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "ADD"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "DUP1"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "DUP1"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "ADD"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "DUP3"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "DUP2"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "SUB"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "DUP3"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "MSTORE"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH",
											"value": "38"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "DUP2"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "MSTORE"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "ADD"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "DUP1"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH data",
											"value": "6D83CEF3E0CB19B8320A9C5FEB26B56BBB08F152A8E61B12ECA3302D8D68B23D"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH",
											"value": "38"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "SWAP2"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "CODECOPY"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "ADD"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "SWAP2"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "POP"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "POP"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "MLOAD"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "DUP1"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "SWAP2"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "SUB"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "SWAP1"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "REVERT"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "tag",
											"value": "57"
										},
										{
											"begin": 3714,
											"end": 3862,
											"name": "JUMPDEST"
										},
										{
											"begin": 3900,
											"end": 3902,
											"name": "DUP3"
										},
										{
											"begin": 3873,
											"end": 3888,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3889,
											"end": 3896,
											"name": "DUP5"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "DUP2"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "MSTORE"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "ADD"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "SWAP1"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "DUP2"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "MSTORE"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "ADD"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "KECCAK256"
										},
										{
											"begin": 3873,
											"end": 3897,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "EXP"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "DUP2"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "SLOAD"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "DUP2"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "MUL"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "NOT"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "AND"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "SWAP1"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "DUP4"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "AND"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "MUL"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "OR"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "SWAP1"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "SSTORE"
										},
										{
											"begin": 3873,
											"end": 3902,
											"name": "POP"
										},
										{
											"begin": 3937,
											"end": 3944,
											"name": "DUP2"
										},
										{
											"begin": 3933,
											"end": 3935,
											"name": "DUP4"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "AND"
										},
										{
											"begin": 3926,
											"end": 3931,
											"name": "DUP3"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "AND"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "PUSH",
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "MLOAD"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "MLOAD"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "DUP1"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "SWAP2"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "SUB"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "SWAP1"
										},
										{
											"begin": 3917,
											"end": 3945,
											"name": "LOG4"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "POP"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "POP"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "POP"
										},
										{
											"begin": 3541,
											"end": 3952,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "JUMPDEST"
										},
										{
											"begin": 6019,
											"end": 6058,
											"name": "PUSH [tag]",
											"value": "59"
										},
										{
											"begin": 6038,
											"end": 6048,
											"name": "CALLER"
										},
										{
											"begin": 6050,
											"end": 6057,
											"name": "DUP3"
										},
										{
											"begin": 6019,
											"end": 6037,
											"name": "PUSH [tag]",
											"value": "60"
										},
										{
											"begin": 6019,
											"end": 6058,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6019,
											"end": 6058,
											"name": "tag",
											"value": "59"
										},
										{
											"begin": 6019,
											"end": 6058,
											"name": "JUMPDEST"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH [tag]",
											"value": "61"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "JUMPI"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "MLOAD"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "DUP2"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "MSTORE"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "ADD"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "DUP1"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "DUP1"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "ADD"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "DUP3"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "DUP2"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "SUB"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "DUP3"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "MSTORE"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH",
											"value": "31"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "DUP2"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "MSTORE"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "ADD"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "DUP1"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH data",
											"value": "C8682F3AD98807DB59A6EC6BB812B72FED0A66E3150FA8239699EE83885247F2"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH",
											"value": "31"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "SWAP2"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "CODECOPY"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "ADD"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "SWAP2"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "POP"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "POP"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "MLOAD"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "DUP1"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "SWAP2"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "SUB"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "SWAP1"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "REVERT"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "tag",
											"value": "61"
										},
										{
											"begin": 6011,
											"end": 6112,
											"name": "JUMPDEST"
										},
										{
											"begin": 6123,
											"end": 6155,
											"name": "PUSH [tag]",
											"value": "62"
										},
										{
											"begin": 6137,
											"end": 6141,
											"name": "DUP4"
										},
										{
											"begin": 6143,
											"end": 6145,
											"name": "DUP4"
										},
										{
											"begin": 6147,
											"end": 6154,
											"name": "DUP4"
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "PUSH [tag]",
											"value": "63"
										},
										{
											"begin": 6123,
											"end": 6155,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6123,
											"end": 6155,
											"name": "tag",
											"value": "62"
										},
										{
											"begin": 6123,
											"end": 6155,
											"name": "JUMPDEST"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "POP"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "POP"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "POP"
										},
										{
											"begin": 5877,
											"end": 6162,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "tag",
											"value": "28"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "JUMPDEST"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "PUSH [tag]",
											"value": "65"
										},
										{
											"begin": 6898,
											"end": 6902,
											"name": "DUP4"
										},
										{
											"begin": 6904,
											"end": 6906,
											"name": "DUP4"
										},
										{
											"begin": 6908,
											"end": 6915,
											"name": "DUP4"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "MLOAD"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "DUP1"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "ADD"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "MSTORE"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "DUP1"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "DUP2"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "MSTORE"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "POP"
										},
										{
											"begin": 6881,
											"end": 6897,
											"name": "PUSH [tag]",
											"value": "43"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "tag",
											"value": "65"
										},
										{
											"begin": 6881,
											"end": 6920,
											"name": "JUMPDEST"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "POP"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "POP"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "POP"
										},
										{
											"begin": 6795,
											"end": 6927,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "tag",
											"value": "31"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "JUMPDEST"
										},
										{
											"begin": 2952,
											"end": 2959,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2971,
											"end": 2984,
											"name": "DUP1"
										},
										{
											"begin": 2987,
											"end": 2998,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2999,
											"end": 3006,
											"name": "DUP5"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "DUP2"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "MSTORE"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "ADD"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "SWAP1"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "DUP2"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "MSTORE"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "ADD"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "KECCAK256"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "SWAP1"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "SLOAD"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "SWAP1"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "EXP"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "SWAP1"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "DIV"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2987,
											"end": 3007,
											"name": "AND"
										},
										{
											"begin": 2971,
											"end": 3007,
											"name": "SWAP1"
										},
										{
											"begin": 2971,
											"end": 3007,
											"name": "POP"
										},
										{
											"begin": 3042,
											"end": 3043,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3025,
											"end": 3044,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3025,
											"end": 3044,
											"name": "AND"
										},
										{
											"begin": 3025,
											"end": 3030,
											"name": "DUP2"
										},
										{
											"begin": 3025,
											"end": 3044,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3025,
											"end": 3044,
											"name": "AND"
										},
										{
											"begin": 3025,
											"end": 3044,
											"name": "EQ"
										},
										{
											"begin": 3025,
											"end": 3044,
											"name": "ISZERO"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH [tag]",
											"value": "67"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "JUMPI"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "MLOAD"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "DUP2"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "MSTORE"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "ADD"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "DUP1"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "DUP1"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "ADD"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "DUP3"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "DUP2"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "SUB"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "DUP3"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "MSTORE"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "DUP2"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "MSTORE"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "ADD"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "DUP1"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH data",
											"value": "7481F3DF2A424C0755A1AD2356614E9A5A358D461EA2EAE1F89CB21CBAD00397"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "SWAP2"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "CODECOPY"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "ADD"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "SWAP2"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "POP"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "POP"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "MLOAD"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "DUP1"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "SWAP2"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "SUB"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "SWAP1"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "REVERT"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "tag",
											"value": "67"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "JUMPDEST"
										},
										{
											"begin": 3108,
											"end": 3113,
											"name": "DUP1"
										},
										{
											"begin": 3101,
											"end": 3113,
											"name": "SWAP2"
										},
										{
											"begin": 3101,
											"end": 3113,
											"name": "POP"
										},
										{
											"begin": 3101,
											"end": 3113,
											"name": "POP"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP2"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "SWAP1"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "POP"
										},
										{
											"begin": 2897,
											"end": 3120,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "tag",
											"value": "34"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "JUMPDEST"
										},
										{
											"begin": 2526,
											"end": 2533,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2570,
											"end": 2571,
											"name": "DUP1"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "AND"
										},
										{
											"begin": 2553,
											"end": 2558,
											"name": "DUP3"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "AND"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "EQ"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "ISZERO"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH [tag]",
											"value": "69"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "JUMPI"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "MLOAD"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "DUP2"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "MSTORE"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "ADD"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "DUP1"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "DUP1"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "ADD"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "DUP3"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "DUP2"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "SUB"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "DUP3"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "MSTORE"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH",
											"value": "2A"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "DUP2"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "MSTORE"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "ADD"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "DUP1"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH data",
											"value": "7395D4D3901C50CDFCAB223D072F9AA36241DF5D883E62CBF147EE1B05A9E6BA"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH",
											"value": "2A"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "SWAP2"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "CODECOPY"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "ADD"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "SWAP2"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "POP"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "POP"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "MLOAD"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "DUP1"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "SWAP2"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "SUB"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "SWAP1"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "REVERT"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "tag",
											"value": "69"
										},
										{
											"begin": 2545,
											"end": 2619,
											"name": "JUMPDEST"
										},
										{
											"begin": 2637,
											"end": 2671,
											"name": "PUSH [tag]",
											"value": "70"
										},
										{
											"begin": 2637,
											"end": 2654,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2655,
											"end": 2660,
											"name": "DUP5"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "AND"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "AND"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "DUP2"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "MSTORE"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "ADD"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "SWAP1"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "DUP2"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "MSTORE"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "ADD"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2637,
											"end": 2661,
											"name": "KECCAK256"
										},
										{
											"begin": 2637,
											"end": 2669,
											"name": "PUSH [tag]",
											"value": "71"
										},
										{
											"begin": 2637,
											"end": 2671,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2637,
											"end": 2671,
											"name": "tag",
											"value": "70"
										},
										{
											"begin": 2637,
											"end": 2671,
											"name": "JUMPDEST"
										},
										{
											"begin": 2630,
											"end": 2671,
											"name": "SWAP1"
										},
										{
											"begin": 2630,
											"end": 2671,
											"name": "POP"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP2"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "SWAP1"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "POP"
										},
										{
											"begin": 2471,
											"end": 2678,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "tag",
											"value": "37"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "JUMPDEST"
										},
										{
											"begin": 4815,
											"end": 4825,
											"name": "CALLER"
										},
										{
											"begin": 4809,
											"end": 4825,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4809,
											"end": 4825,
											"name": "AND"
										},
										{
											"begin": 4809,
											"end": 4811,
											"name": "DUP3"
										},
										{
											"begin": 4809,
											"end": 4825,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4809,
											"end": 4825,
											"name": "AND"
										},
										{
											"begin": 4809,
											"end": 4825,
											"name": "EQ"
										},
										{
											"begin": 4809,
											"end": 4825,
											"name": "ISZERO"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "PUSH [tag]",
											"value": "73"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "JUMPI"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "MLOAD"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "DUP2"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "MSTORE"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "ADD"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "DUP1"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "DUP1"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "ADD"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "DUP3"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "DUP2"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "SUB"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "DUP3"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "MSTORE"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "PUSH",
											"value": "19"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "DUP2"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "MSTORE"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "ADD"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "DUP1"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "PUSH",
											"value": "4552433732313A20617070726F766520746F2063616C6C657200000000000000"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "DUP2"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "MSTORE"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "POP"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "ADD"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "SWAP2"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "POP"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "POP"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "MLOAD"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "DUP1"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "SWAP2"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "SUB"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "SWAP1"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "REVERT"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "tag",
											"value": "73"
										},
										{
											"begin": 4801,
											"end": 4855,
											"name": "JUMPDEST"
										},
										{
											"begin": 4903,
											"end": 4911,
											"name": "DUP1"
										},
										{
											"begin": 4866,
											"end": 4884,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4885,
											"end": 4895,
											"name": "CALLER"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "AND"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "AND"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "DUP2"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "MSTORE"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "ADD"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "SWAP1"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "DUP2"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "MSTORE"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "ADD"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4866,
											"end": 4896,
											"name": "KECCAK256"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4897,
											"end": 4899,
											"name": "DUP5"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "AND"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "AND"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "DUP2"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "MSTORE"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "ADD"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "SWAP1"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "DUP2"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "MSTORE"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "ADD"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "KECCAK256"
										},
										{
											"begin": 4866,
											"end": 4900,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "EXP"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "DUP2"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "SLOAD"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "DUP2"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "MUL"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "NOT"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "AND"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "SWAP1"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "DUP4"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "ISZERO"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "ISZERO"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "MUL"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "OR"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "SWAP1"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "SSTORE"
										},
										{
											"begin": 4866,
											"end": 4911,
											"name": "POP"
										},
										{
											"begin": 4953,
											"end": 4955,
											"name": "DUP2"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "AND"
										},
										{
											"begin": 4941,
											"end": 4951,
											"name": "CALLER"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "AND"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "PUSH",
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 4957,
											"end": 4965,
											"name": "DUP4"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "MLOAD"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "DUP1"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "DUP3"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "ISZERO"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "ISZERO"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "ISZERO"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "ISZERO"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "DUP2"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "MSTORE"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "ADD"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "SWAP2"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "POP"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "POP"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "MLOAD"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "DUP1"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "SWAP2"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "SUB"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "SWAP1"
										},
										{
											"begin": 4926,
											"end": 4966,
											"name": "LOG3"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "POP"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "POP"
										},
										{
											"begin": 4730,
											"end": 4973,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "tag",
											"value": "43"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "JUMPDEST"
										},
										{
											"begin": 7738,
											"end": 7769,
											"name": "PUSH [tag]",
											"value": "75"
										},
										{
											"begin": 7751,
											"end": 7755,
											"name": "DUP5"
										},
										{
											"begin": 7757,
											"end": 7759,
											"name": "DUP5"
										},
										{
											"begin": 7761,
											"end": 7768,
											"name": "DUP5"
										},
										{
											"begin": 7738,
											"end": 7750,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 7738,
											"end": 7769,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 7738,
											"end": 7769,
											"name": "tag",
											"value": "75"
										},
										{
											"begin": 7738,
											"end": 7769,
											"name": "JUMPDEST"
										},
										{
											"begin": 7787,
											"end": 7835,
											"name": "PUSH [tag]",
											"value": "76"
										},
										{
											"begin": 7810,
											"end": 7814,
											"name": "DUP5"
										},
										{
											"begin": 7816,
											"end": 7818,
											"name": "DUP5"
										},
										{
											"begin": 7820,
											"end": 7827,
											"name": "DUP5"
										},
										{
											"begin": 7829,
											"end": 7834,
											"name": "DUP5"
										},
										{
											"begin": 7787,
											"end": 7809,
											"name": "PUSH [tag]",
											"value": "77"
										},
										{
											"begin": 7787,
											"end": 7835,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 7787,
											"end": 7835,
											"name": "tag",
											"value": "76"
										},
										{
											"begin": 7787,
											"end": 7835,
											"name": "JUMPDEST"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "JUMPI"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "MLOAD"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "DUP2"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "MSTORE"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "ADD"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "DUP1"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "DUP1"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "ADD"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "DUP3"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "DUP2"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "SUB"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "DUP3"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "MSTORE"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH",
											"value": "32"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "DUP2"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "MSTORE"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "ADD"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "DUP1"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH data",
											"value": "1E766A06DA43A53D0F4C380E06E5A342E14D5AF1BF8501996C844905530CA84E"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH",
											"value": "32"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "SWAP2"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "CODECOPY"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "ADD"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "SWAP2"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "POP"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "POP"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "MLOAD"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "DUP1"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "SWAP2"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "SUB"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "SWAP1"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "REVERT"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "tag",
											"value": "78"
										},
										{
											"begin": 7779,
											"end": 7890,
											"name": "JUMPDEST"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "POP"
										},
										{
											"begin": 7632,
											"end": 7897,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "tag",
											"value": "46"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "JUMPDEST"
										},
										{
											"begin": 5375,
											"end": 5379,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5398,
											"end": 5416,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5417,
											"end": 5422,
											"name": "DUP5"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "AND"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "AND"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "DUP2"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "MSTORE"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "ADD"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "SWAP1"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "DUP2"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "MSTORE"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "ADD"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5398,
											"end": 5423,
											"name": "KECCAK256"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5424,
											"end": 5432,
											"name": "DUP4"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "AND"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "AND"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "DUP2"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "MSTORE"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "ADD"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "SWAP1"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "DUP2"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "MSTORE"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "ADD"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "KECCAK256"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "SWAP1"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "SLOAD"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "SWAP1"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "EXP"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "SWAP1"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "DIV"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 5398,
											"end": 5433,
											"name": "AND"
										},
										{
											"begin": 5391,
											"end": 5433,
											"name": "SWAP1"
										},
										{
											"begin": 5391,
											"end": 5433,
											"name": "POP"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP3"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "SWAP2"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "POP"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "POP"
										},
										{
											"begin": 5295,
											"end": 5440,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 8092,
											"end": 8244,
											"name": "tag",
											"value": "50"
										},
										{
											"begin": 8092,
											"end": 8244,
											"name": "JUMPDEST"
										},
										{
											"begin": 8149,
											"end": 8153,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8165,
											"end": 8178,
											"name": "DUP1"
										},
										{
											"begin": 8181,
											"end": 8192,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8193,
											"end": 8200,
											"name": "DUP5"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "DUP2"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "MSTORE"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "ADD"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "SWAP1"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "DUP2"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "MSTORE"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "ADD"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "KECCAK256"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "SWAP1"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "SLOAD"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "SWAP1"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "EXP"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "SWAP1"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "DIV"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8181,
											"end": 8201,
											"name": "AND"
										},
										{
											"begin": 8165,
											"end": 8201,
											"name": "SWAP1"
										},
										{
											"begin": 8165,
											"end": 8201,
											"name": "POP"
										},
										{
											"begin": 8235,
											"end": 8236,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8218,
											"end": 8237,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8218,
											"end": 8237,
											"name": "AND"
										},
										{
											"begin": 8218,
											"end": 8223,
											"name": "DUP2"
										},
										{
											"begin": 8218,
											"end": 8237,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8218,
											"end": 8237,
											"name": "AND"
										},
										{
											"begin": 8218,
											"end": 8237,
											"name": "EQ"
										},
										{
											"begin": 8218,
											"end": 8237,
											"name": "ISZERO"
										},
										{
											"begin": 8211,
											"end": 8237,
											"name": "SWAP2"
										},
										{
											"begin": 8211,
											"end": 8237,
											"name": "POP"
										},
										{
											"begin": 8211,
											"end": 8237,
											"name": "POP"
										},
										{
											"begin": 8092,
											"end": 8244,
											"name": "SWAP2"
										},
										{
											"begin": 8092,
											"end": 8244,
											"name": "SWAP1"
										},
										{
											"begin": 8092,
											"end": 8244,
											"name": "POP"
										},
										{
											"begin": 8092,
											"end": 8244,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 8605,
											"end": 8934,
											"name": "tag",
											"value": "60"
										},
										{
											"begin": 8605,
											"end": 8934,
											"name": "JUMPDEST"
										},
										{
											"begin": 8690,
											"end": 8694,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8714,
											"end": 8730,
											"name": "PUSH [tag]",
											"value": "82"
										},
										{
											"begin": 8722,
											"end": 8729,
											"name": "DUP3"
										},
										{
											"begin": 8714,
											"end": 8721,
											"name": "PUSH [tag]",
											"value": "50"
										},
										{
											"begin": 8714,
											"end": 8730,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 8714,
											"end": 8730,
											"name": "tag",
											"value": "82"
										},
										{
											"begin": 8714,
											"end": 8730,
											"name": "JUMPDEST"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH [tag]",
											"value": "83"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "JUMPI"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "MLOAD"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "DUP2"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "MSTORE"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "ADD"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "DUP1"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "DUP1"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "ADD"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "DUP3"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "DUP2"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "SUB"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "DUP3"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "MSTORE"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH",
											"value": "2C"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "DUP2"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "MSTORE"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "ADD"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "DUP1"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH data",
											"value": "5797D1CCB08B83980DD0C07EA40D8F6A64D35FFF736A19BDD17522954CB0899C"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH",
											"value": "2C"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "SWAP2"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "CODECOPY"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "ADD"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "SWAP2"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "POP"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "POP"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "MLOAD"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "DUP1"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "SWAP2"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "SUB"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "SWAP1"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "REVERT"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "tag",
											"value": "83"
										},
										{
											"begin": 8706,
											"end": 8779,
											"name": "JUMPDEST"
										},
										{
											"begin": 8789,
											"end": 8802,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8805,
											"end": 8821,
											"name": "PUSH [tag]",
											"value": "84"
										},
										{
											"begin": 8813,
											"end": 8820,
											"name": "DUP4"
										},
										{
											"begin": 8805,
											"end": 8812,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 8805,
											"end": 8821,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 8805,
											"end": 8821,
											"name": "tag",
											"value": "84"
										},
										{
											"begin": 8805,
											"end": 8821,
											"name": "JUMPDEST"
										},
										{
											"begin": 8789,
											"end": 8821,
											"name": "SWAP1"
										},
										{
											"begin": 8789,
											"end": 8821,
											"name": "POP"
										},
										{
											"begin": 8850,
											"end": 8855,
											"name": "DUP1"
										},
										{
											"begin": 8839,
											"end": 8855,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8839,
											"end": 8855,
											"name": "AND"
										},
										{
											"begin": 8839,
											"end": 8846,
											"name": "DUP5"
										},
										{
											"begin": 8839,
											"end": 8855,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8839,
											"end": 8855,
											"name": "AND"
										},
										{
											"begin": 8839,
											"end": 8855,
											"name": "EQ"
										},
										{
											"begin": 8839,
											"end": 8890,
											"name": "DUP1"
										},
										{
											"begin": 8839,
											"end": 8890,
											"name": "PUSH [tag]",
											"value": "85"
										},
										{
											"begin": 8839,
											"end": 8890,
											"name": "JUMPI"
										},
										{
											"begin": 8839,
											"end": 8890,
											"name": "POP"
										},
										{
											"begin": 8883,
											"end": 8890,
											"name": "DUP4"
										},
										{
											"begin": 8859,
											"end": 8890,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8859,
											"end": 8890,
											"name": "AND"
										},
										{
											"begin": 8859,
											"end": 8879,
											"name": "PUSH [tag]",
											"value": "86"
										},
										{
											"begin": 8871,
											"end": 8878,
											"name": "DUP5"
										},
										{
											"begin": 8859,
											"end": 8870,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 8859,
											"end": 8879,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 8859,
											"end": 8879,
											"name": "tag",
											"value": "86"
										},
										{
											"begin": 8859,
											"end": 8879,
											"name": "JUMPDEST"
										},
										{
											"begin": 8859,
											"end": 8890,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8859,
											"end": 8890,
											"name": "AND"
										},
										{
											"begin": 8859,
											"end": 8890,
											"name": "EQ"
										},
										{
											"begin": 8839,
											"end": 8890,
											"name": "tag",
											"value": "85"
										},
										{
											"begin": 8839,
											"end": 8890,
											"name": "JUMPDEST"
										},
										{
											"begin": 8839,
											"end": 8926,
											"name": "DUP1"
										},
										{
											"begin": 8839,
											"end": 8926,
											"name": "PUSH [tag]",
											"value": "87"
										},
										{
											"begin": 8839,
											"end": 8926,
											"name": "JUMPI"
										},
										{
											"begin": 8839,
											"end": 8926,
											"name": "POP"
										},
										{
											"begin": 8894,
											"end": 8926,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 8911,
											"end": 8916,
											"name": "DUP2"
										},
										{
											"begin": 8918,
											"end": 8925,
											"name": "DUP6"
										},
										{
											"begin": 8894,
											"end": 8910,
											"name": "PUSH [tag]",
											"value": "46"
										},
										{
											"begin": 8894,
											"end": 8926,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 8894,
											"end": 8926,
											"name": "tag",
											"value": "88"
										},
										{
											"begin": 8894,
											"end": 8926,
											"name": "JUMPDEST"
										},
										{
											"begin": 8839,
											"end": 8926,
											"name": "tag",
											"value": "87"
										},
										{
											"begin": 8839,
											"end": 8926,
											"name": "JUMPDEST"
										},
										{
											"begin": 8831,
											"end": 8927,
											"name": "SWAP2"
										},
										{
											"begin": 8831,
											"end": 8927,
											"name": "POP"
										},
										{
											"begin": 8831,
											"end": 8927,
											"name": "POP"
										},
										{
											"begin": 8605,
											"end": 8934,
											"name": "SWAP3"
										},
										{
											"begin": 8605,
											"end": 8934,
											"name": "SWAP2"
										},
										{
											"begin": 8605,
											"end": 8934,
											"name": "POP"
										},
										{
											"begin": 8605,
											"end": 8934,
											"name": "POP"
										},
										{
											"begin": 8605,
											"end": 8934,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 10751,
											"end": 11198,
											"name": "tag",
											"value": "63"
										},
										{
											"begin": 10751,
											"end": 11198,
											"name": "JUMPDEST"
										},
										{
											"begin": 10864,
											"end": 10868,
											"name": "DUP3"
										},
										{
											"begin": 10844,
											"end": 10868,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10844,
											"end": 10868,
											"name": "AND"
										},
										{
											"begin": 10844,
											"end": 10860,
											"name": "PUSH [tag]",
											"value": "90"
										},
										{
											"begin": 10852,
											"end": 10859,
											"name": "DUP3"
										},
										{
											"begin": 10844,
											"end": 10851,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 10844,
											"end": 10860,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 10844,
											"end": 10860,
											"name": "tag",
											"value": "90"
										},
										{
											"begin": 10844,
											"end": 10860,
											"name": "JUMPDEST"
										},
										{
											"begin": 10844,
											"end": 10868,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10844,
											"end": 10868,
											"name": "AND"
										},
										{
											"begin": 10844,
											"end": 10868,
											"name": "EQ"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH [tag]",
											"value": "91"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "JUMPI"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "MLOAD"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "DUP2"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "MSTORE"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "ADD"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "DUP1"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "DUP1"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "ADD"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "DUP3"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "DUP2"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "SUB"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "DUP3"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "MSTORE"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "DUP2"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "MSTORE"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "ADD"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "DUP1"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH data",
											"value": "A01073130A885D6C1C1AF6AC75FC3B1C4F9403C235362962BBF528E2BD87D950"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "SWAP2"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "CODECOPY"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "ADD"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "SWAP2"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "POP"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "POP"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "MLOAD"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "DUP1"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "SWAP2"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "SUB"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "SWAP1"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "REVERT"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "tag",
											"value": "91"
										},
										{
											"begin": 10836,
											"end": 10914,
											"name": "JUMPDEST"
										},
										{
											"begin": 10946,
											"end": 10947,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 10932,
											"end": 10948,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10932,
											"end": 10948,
											"name": "AND"
										},
										{
											"begin": 10932,
											"end": 10934,
											"name": "DUP3"
										},
										{
											"begin": 10932,
											"end": 10948,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10932,
											"end": 10948,
											"name": "AND"
										},
										{
											"begin": 10932,
											"end": 10948,
											"name": "EQ"
										},
										{
											"begin": 10932,
											"end": 10948,
											"name": "ISZERO"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH [tag]",
											"value": "92"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "JUMPI"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "MLOAD"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "DUP2"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "MSTORE"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "ADD"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "DUP1"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "DUP1"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "ADD"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "DUP3"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "DUP2"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "SUB"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "DUP3"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "MSTORE"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "DUP2"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "MSTORE"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "ADD"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "DUP1"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH data",
											"value": "455FEA98EA03C32D7DD1A6F1426917D80529BF47B3CCBDE74E7206E889E709F4"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "SWAP2"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "CODECOPY"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "ADD"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "SWAP2"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "POP"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "POP"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "MLOAD"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "DUP1"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "SWAP2"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "SUB"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "SWAP1"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "REVERT"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "tag",
											"value": "92"
										},
										{
											"begin": 10924,
											"end": 10989,
											"name": "JUMPDEST"
										},
										{
											"begin": 11000,
											"end": 11023,
											"name": "PUSH [tag]",
											"value": "93"
										},
										{
											"begin": 11015,
											"end": 11022,
											"name": "DUP2"
										},
										{
											"begin": 11000,
											"end": 11014,
											"name": "PUSH [tag]",
											"value": "94"
										},
										{
											"begin": 11000,
											"end": 11023,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11000,
											"end": 11023,
											"name": "tag",
											"value": "93"
										},
										{
											"begin": 11000,
											"end": 11023,
											"name": "JUMPDEST"
										},
										{
											"begin": 11034,
											"end": 11069,
											"name": "PUSH [tag]",
											"value": "95"
										},
										{
											"begin": 11034,
											"end": 11051,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11052,
											"end": 11056,
											"name": "DUP6"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "AND"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "AND"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "DUP2"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "MSTORE"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "ADD"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "SWAP1"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "DUP2"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "MSTORE"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "ADD"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11034,
											"end": 11057,
											"name": "KECCAK256"
										},
										{
											"begin": 11034,
											"end": 11067,
											"name": "PUSH [tag]",
											"value": "96"
										},
										{
											"begin": 11034,
											"end": 11069,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11034,
											"end": 11069,
											"name": "tag",
											"value": "95"
										},
										{
											"begin": 11034,
											"end": 11069,
											"name": "JUMPDEST"
										},
										{
											"begin": 11079,
											"end": 11112,
											"name": "PUSH [tag]",
											"value": "97"
										},
										{
											"begin": 11079,
											"end": 11096,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11097,
											"end": 11099,
											"name": "DUP5"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "AND"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "AND"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "DUP2"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "MSTORE"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "ADD"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "SWAP1"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "DUP2"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "MSTORE"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "ADD"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11079,
											"end": 11100,
											"name": "KECCAK256"
										},
										{
											"begin": 11079,
											"end": 11110,
											"name": "PUSH [tag]",
											"value": "98"
										},
										{
											"begin": 11079,
											"end": 11112,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11079,
											"end": 11112,
											"name": "tag",
											"value": "97"
										},
										{
											"begin": 11079,
											"end": 11112,
											"name": "JUMPDEST"
										},
										{
											"begin": 11146,
											"end": 11148,
											"name": "DUP2"
										},
										{
											"begin": 11123,
											"end": 11134,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11135,
											"end": 11142,
											"name": "DUP4"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "DUP2"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "MSTORE"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "ADD"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "SWAP1"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "DUP2"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "MSTORE"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "ADD"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "KECCAK256"
										},
										{
											"begin": 11123,
											"end": 11143,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "EXP"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "DUP2"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "SLOAD"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "DUP2"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "MUL"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "NOT"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "AND"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "SWAP1"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "DUP4"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "AND"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "MUL"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "OR"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "SWAP1"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "SSTORE"
										},
										{
											"begin": 11123,
											"end": 11148,
											"name": "POP"
										},
										{
											"begin": 11183,
											"end": 11190,
											"name": "DUP1"
										},
										{
											"begin": 11179,
											"end": 11181,
											"name": "DUP3"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "AND"
										},
										{
											"begin": 11173,
											"end": 11177,
											"name": "DUP5"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "AND"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "PUSH",
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "MLOAD"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "MLOAD"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "DUP1"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "SWAP2"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "SUB"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "SWAP1"
										},
										{
											"begin": 11164,
											"end": 11191,
											"name": "LOG4"
										},
										{
											"begin": 10751,
											"end": 11198,
											"name": "POP"
										},
										{
											"begin": 10751,
											"end": 11198,
											"name": "POP"
										},
										{
											"begin": 10751,
											"end": 11198,
											"name": "POP"
										},
										{
											"begin": 10751,
											"end": 11198,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1063,
											"end": 1175,
											"name": "tag",
											"value": "71"
										},
										{
											"begin": 1063,
											"end": 1175,
											"name": "JUMPDEST"
										},
										{
											"begin": 1128,
											"end": 1135,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "DUP2"
										},
										{
											"begin": 1154,
											"end": 1168,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1154,
											"end": 1168,
											"name": "ADD"
										},
										{
											"begin": 1154,
											"end": 1168,
											"name": "SLOAD"
										},
										{
											"begin": 1147,
											"end": 1168,
											"name": "SWAP1"
										},
										{
											"begin": 1147,
											"end": 1168,
											"name": "POP"
										},
										{
											"begin": 1063,
											"end": 1175,
											"name": "SWAP2"
										},
										{
											"begin": 1063,
											"end": 1175,
											"name": "SWAP1"
										},
										{
											"begin": 1063,
											"end": 1175,
											"name": "POP"
										},
										{
											"begin": 1063,
											"end": 1175,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "tag",
											"value": "77"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "JUMPDEST"
										},
										{
											"begin": 11892,
											"end": 11896,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11917,
											"end": 11932,
											"name": "PUSH [tag]",
											"value": "101"
										},
										{
											"begin": 11917,
											"end": 11919,
											"name": "DUP5"
										},
										{
											"begin": 11917,
											"end": 11930,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11917,
											"end": 11930,
											"name": "AND"
										},
										{
											"begin": 11917,
											"end": 11930,
											"name": "PUSH [tag]",
											"value": "102"
										},
										{
											"begin": 11917,
											"end": 11932,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11917,
											"end": 11932,
											"name": "tag",
											"value": "101"
										},
										{
											"begin": 11917,
											"end": 11932,
											"name": "JUMPDEST"
										},
										{
											"begin": 11912,
											"end": 11970,
											"name": "PUSH [tag]",
											"value": "103"
										},
										{
											"begin": 11912,
											"end": 11970,
											"name": "JUMPI"
										},
										{
											"begin": 11955,
											"end": 11959,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 11948,
											"end": 11959,
											"name": "SWAP1"
										},
										{
											"begin": 11948,
											"end": 11959,
											"name": "POP"
										},
										{
											"begin": 11948,
											"end": 11959,
											"name": "PUSH [tag]",
											"value": "100"
										},
										{
											"begin": 11948,
											"end": 11959,
											"name": "JUMP"
										},
										{
											"begin": 11912,
											"end": 11970,
											"name": "tag",
											"value": "103"
										},
										{
											"begin": 11912,
											"end": 11970,
											"name": "JUMPDEST"
										},
										{
											"begin": 11980,
											"end": 11993,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12012,
											"end": 12014,
											"name": "DUP5"
										},
										{
											"begin": 11996,
											"end": 12032,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11996,
											"end": 12032,
											"name": "AND"
										},
										{
											"begin": 11996,
											"end": 12032,
											"name": "PUSH",
											"value": "150B7A02"
										},
										{
											"begin": 12033,
											"end": 12043,
											"name": "CALLER"
										},
										{
											"begin": 12045,
											"end": 12049,
											"name": "DUP9"
										},
										{
											"begin": 12051,
											"end": 12058,
											"name": "DUP8"
										},
										{
											"begin": 12060,
											"end": 12065,
											"name": "DUP8"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MLOAD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP6"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "AND"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SHL"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MSTORE"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP6"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "AND"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "AND"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MSTORE"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP5"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "AND"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "AND"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MSTORE"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP4"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MSTORE"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP3"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SUB"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP3"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MSTORE"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP4"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MLOAD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MSTORE"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MLOAD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP4"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "104"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "106"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "104"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "106"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "AND"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ISZERO"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH [tag]",
											"value": "107"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "JUMPI"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP3"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SUB"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MLOAD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP4"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SUB"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "EXP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SUB"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "NOT"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "AND"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MSTORE"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "tag",
											"value": "107"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "JUMPDEST"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP6"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MLOAD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP4"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SUB"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP8"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "108"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "108"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "GAS"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "CALL"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "109"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "109"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MLOAD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "110"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "110"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "DUP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "MLOAD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "ADD"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP3"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP2"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "SWAP1"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11996,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 11980,
											"end": 12066,
											"name": "SWAP1"
										},
										{
											"begin": 11980,
											"end": 12066,
											"name": "POP"
										},
										{
											"begin": 713,
											"end": 723,
											"name": "PUSH",
											"value": "150B7A02"
										},
										{
											"begin": 12094,
											"end": 12110,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 12094,
											"end": 12110,
											"name": "SHL"
										},
										{
											"begin": 12084,
											"end": 12110,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12084,
											"end": 12110,
											"name": "NOT"
										},
										{
											"begin": 12084,
											"end": 12110,
											"name": "AND"
										},
										{
											"begin": 12084,
											"end": 12090,
											"name": "DUP2"
										},
										{
											"begin": 12084,
											"end": 12110,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12084,
											"end": 12110,
											"name": "NOT"
										},
										{
											"begin": 12084,
											"end": 12110,
											"name": "AND"
										},
										{
											"begin": 12084,
											"end": 12110,
											"name": "EQ"
										},
										{
											"begin": 12076,
											"end": 12111,
											"name": "SWAP2"
										},
										{
											"begin": 12076,
											"end": 12111,
											"name": "POP"
										},
										{
											"begin": 12076,
											"end": 12111,
											"name": "POP"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "tag",
											"value": "100"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "JUMPDEST"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "SWAP5"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "SWAP4"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "POP"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "POP"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "POP"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "POP"
										},
										{
											"begin": 11771,
											"end": 12118,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 12280,
											"end": 12451,
											"name": "tag",
											"value": "94"
										},
										{
											"begin": 12280,
											"end": 12451,
											"name": "JUMPDEST"
										},
										{
											"begin": 12379,
											"end": 12380,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12343,
											"end": 12381,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12343,
											"end": 12381,
											"name": "AND"
										},
										{
											"begin": 12343,
											"end": 12358,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12359,
											"end": 12366,
											"name": "DUP4"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "DUP2"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "MSTORE"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "ADD"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "SWAP1"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "DUP2"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "MSTORE"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "ADD"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "KECCAK256"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "SWAP1"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "SLOAD"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "SWAP1"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "EXP"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "SWAP1"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "DIV"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12343,
											"end": 12367,
											"name": "AND"
										},
										{
											"begin": 12343,
											"end": 12381,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12343,
											"end": 12381,
											"name": "AND"
										},
										{
											"begin": 12343,
											"end": 12381,
											"name": "EQ"
										},
										{
											"begin": 12339,
											"end": 12445,
											"name": "PUSH [tag]",
											"value": "112"
										},
										{
											"begin": 12339,
											"end": 12445,
											"name": "JUMPI"
										},
										{
											"begin": 12432,
											"end": 12433,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12397,
											"end": 12412,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12413,
											"end": 12420,
											"name": "DUP4"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "DUP2"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "MSTORE"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "ADD"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "SWAP1"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "DUP2"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "MSTORE"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "ADD"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "KECCAK256"
										},
										{
											"begin": 12397,
											"end": 12421,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "EXP"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "DUP2"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "SLOAD"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "DUP2"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "MUL"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "NOT"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "AND"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "SWAP1"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "DUP4"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "AND"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "MUL"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "OR"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "SWAP1"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "SSTORE"
										},
										{
											"begin": 12397,
											"end": 12434,
											"name": "POP"
										},
										{
											"begin": 12339,
											"end": 12445,
											"name": "tag",
											"value": "112"
										},
										{
											"begin": 12339,
											"end": 12445,
											"name": "JUMPDEST"
										},
										{
											"begin": 12280,
											"end": 12451,
											"name": "POP"
										},
										{
											"begin": 12280,
											"end": 12451,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1276,
											"end": 1384,
											"name": "tag",
											"value": "96"
										},
										{
											"begin": 1276,
											"end": 1384,
											"name": "JUMPDEST"
										},
										{
											"begin": 1356,
											"end": 1377,
											"name": "PUSH [tag]",
											"value": "114"
										},
										{
											"begin": 1375,
											"end": 1376,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1356,
											"end": 1363,
											"name": "DUP3"
										},
										{
											"begin": 1356,
											"end": 1370,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1356,
											"end": 1370,
											"name": "ADD"
										},
										{
											"begin": 1356,
											"end": 1370,
											"name": "SLOAD"
										},
										{
											"begin": 1356,
											"end": 1374,
											"name": "PUSH [tag]",
											"value": "115"
										},
										{
											"begin": 1356,
											"end": 1374,
											"name": "SWAP1"
										},
										{
											"begin": 1356,
											"end": 1377,
											"name": "SWAP2"
										},
										{
											"begin": 1356,
											"end": 1377,
											"name": "SWAP1"
										},
										{
											"begin": 1356,
											"end": 1377,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 1356,
											"end": 1377,
											"name": "AND"
										},
										{
											"begin": 1356,
											"end": 1377,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1356,
											"end": 1377,
											"name": "tag",
											"value": "114"
										},
										{
											"begin": 1356,
											"end": 1377,
											"name": "JUMPDEST"
										},
										{
											"begin": 1339,
											"end": 1346,
											"name": "DUP2"
										},
										{
											"begin": 1339,
											"end": 1353,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1339,
											"end": 1353,
											"name": "ADD"
										},
										{
											"begin": 1339,
											"end": 1377,
											"name": "DUP2"
										},
										{
											"begin": 1339,
											"end": 1377,
											"name": "SWAP1"
										},
										{
											"begin": 1339,
											"end": 1377,
											"name": "SSTORE"
										},
										{
											"begin": 1339,
											"end": 1377,
											"name": "POP"
										},
										{
											"begin": 1276,
											"end": 1384,
											"name": "POP"
										},
										{
											"begin": 1276,
											"end": 1384,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1181,
											"end": 1270,
											"name": "tag",
											"value": "98"
										},
										{
											"begin": 1181,
											"end": 1270,
											"name": "JUMPDEST"
										},
										{
											"begin": 1262,
											"end": 1263,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1244,
											"end": 1251,
											"name": "DUP2"
										},
										{
											"begin": 1244,
											"end": 1258,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1244,
											"end": 1258,
											"name": "ADD"
										},
										{
											"begin": 1244,
											"end": 1258,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "DUP3"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "DUP3"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "SLOAD"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "ADD"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "SWAP3"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "POP"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "POP"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "DUP2"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "SWAP1"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "SSTORE"
										},
										{
											"begin": 1244,
											"end": 1263,
											"name": "POP"
										},
										{
											"begin": 1181,
											"end": 1270,
											"name": "POP"
										},
										{
											"begin": 1181,
											"end": 1270,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "tag",
											"value": "102"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "JUMPDEST"
										},
										{
											"begin": 602,
											"end": 606,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 805,
											"end": 817,
											"name": "DUP1"
										},
										{
											"begin": 914,
											"end": 921,
											"name": "DUP3"
										},
										{
											"begin": 902,
											"end": 922,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 894,
											"end": 922,
											"name": "SWAP1"
										},
										{
											"begin": 894,
											"end": 922,
											"name": "POP"
										},
										{
											"begin": 947,
											"end": 948,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 940,
											"end": 944,
											"name": "DUP2"
										},
										{
											"begin": 940,
											"end": 948,
											"name": "GT"
										},
										{
											"begin": 933,
											"end": 948,
											"name": "SWAP2"
										},
										{
											"begin": 933,
											"end": 948,
											"name": "POP"
										},
										{
											"begin": 933,
											"end": 948,
											"name": "POP"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "SWAP2"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "SWAP1"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "POP"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "tag",
											"value": "115"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "JUMPDEST"
										},
										{
											"begin": 1332,
											"end": 1339,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1364,
											"end": 1365,
											"name": "DUP3"
										},
										{
											"begin": 1359,
											"end": 1360,
											"name": "DUP3"
										},
										{
											"begin": 1359,
											"end": 1365,
											"name": "GT"
										},
										{
											"begin": 1359,
											"end": 1365,
											"name": "ISZERO"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH [tag]",
											"value": "119"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "JUMPI"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MLOAD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MSTORE"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "ADD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP1"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP1"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "ADD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP3"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "SUB"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP3"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MSTORE"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "1E"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MSTORE"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "ADD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP1"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MSTORE"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "POP"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "ADD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "SWAP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "POP"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "POP"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MLOAD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP1"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "SWAP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "SUB"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "SWAP1"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "REVERT"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "tag",
											"value": "119"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "JUMPDEST"
										},
										{
											"begin": 1410,
											"end": 1419,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1426,
											"end": 1427,
											"name": "DUP3"
										},
										{
											"begin": 1422,
											"end": 1423,
											"name": "DUP5"
										},
										{
											"begin": 1422,
											"end": 1427,
											"name": "SUB"
										},
										{
											"begin": 1410,
											"end": 1427,
											"name": "SWAP1"
										},
										{
											"begin": 1410,
											"end": 1427,
											"name": "POP"
										},
										{
											"begin": 1445,
											"end": 1446,
											"name": "DUP1"
										},
										{
											"begin": 1438,
											"end": 1446,
											"name": "SWAP2"
										},
										{
											"begin": 1438,
											"end": 1446,
											"name": "POP"
										},
										{
											"begin": 1438,
											"end": 1446,
											"name": "POP"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "SWAP3"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "SWAP2"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "POP"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "POP"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "JUMP",
											"value": "[out]"
										}
									],
									".data": {
										"1E766A06DA43A53D0F4C380E06E5A342E14D5AF1BF8501996C844905530CA84E": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
										"455FEA98EA03C32D7DD1A6F1426917D80529BF47B3CCBDE74E7206E889E709F4": "4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373",
										"5797D1CCB08B83980DD0C07EA40D8F6A64D35FFF736A19BDD17522954CB0899C": "4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e",
										"6D83CEF3E0CB19B8320A9C5FEB26B56BBB08F152A8E61B12ECA3302D8D68B23D": "4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c",
										"7395D4D3901C50CDFCAB223D072F9AA36241DF5D883E62CBF147EE1B05A9E6BA": "4552433732313a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373",
										"7481F3DF2A424C0755A1AD2356614E9A5A358D461EA2EAE1F89CB21CBAD00397": "4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e",
										"9291E0F44949204F2E9B40E6BE090924979D6047B2365868F4E9F027722EB89D": "4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e",
										"A01073130A885D6C1C1AF6AC75FC3B1C4F9403C235362962BBF528E2BD87D950": "4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e",
										"B51B4875EEDE07862961E8F9365C6749F5FE55C6EE5D7A9E42B6912AD0B15942": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572",
										"C8682F3AD98807DB59A6EC6BB812B72FED0A66E3150FA8239699EE83885247F2": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564"
									}
								}
							}
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"see https://eips.ethereum.org/EIPS/eip-721\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"ERC721 Non-Fungible Token Standard basic implementation\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contract/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contract/drafts/Counters.sol\":{\"keccak256\":\"0x5eb69360d3441ab2ee799bd7c007cccbffb0896f12b2dfe1456193e2aa180a11\",\"urls\":[\"bzz-raw://072e8b5a1b5acfc2acba9b6fb87d1dc57065aad44572617ad46b014074969eb3\",\"dweb:/ipfs/QmVTDHUriaxBJqiWCWgWC8vYaYYfXSz883LsowzTx1DcpK\"]},\"contract/introspection/ERC165.sol\":{\"keccak256\":\"0xac2eacd7e7762e275442f28f21d821544df5aae2ed7698af13be8c41b7005e2e\",\"urls\":[\"bzz-raw://8bdbefb642e7b08535c66bbf074e576cfef2300cdf910c1e0b211f6393833a28\",\"dweb:/ipfs/QmQhfx2Ufr8a2gFXm3KogL66xGgAuAWMwcamkWFKGG6Vya\"]},\"contract/introspection/IERC165.sol\":{\"keccak256\":\"0x661553e43d7c4fbb2de504e5999fd5c104d367488350ed5bf023031bd1ba5ac5\",\"urls\":[\"bzz-raw://b40442c5b350b57b88a081a1eacd2bac962d4ecc1f029f5447a18986f08f6f14\",\"dweb:/ipfs/QmV7wjtRf11ibUHh4g8JjuhMpy68pPhV95L2y46UBoRfsZ\"]},\"contract/math/SafeMath.sol\":{\"keccak256\":\"0xd1804d04fb39689453f673601429a99a0c68c422a981fc338773df9a59180fe9\",\"urls\":[\"bzz-raw://1b9307920e0378d58c6677f8952ad090a9ecb30e878835e301a0d18386a870c1\",\"dweb:/ipfs/QmYYixTDVF4FXqFpYzEcufAwEY9BFBJ33Ew9ncsGvD7btC\"]},\"contract/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xf151df411bbf4eaef1fc8e8480cd10c2cd985f1a36517e63981517610213efc1\",\"urls\":[\"bzz-raw://2a277b3cc3a1a03af5c039bc75cd16bb2d23b529cb2564cc0bea1b1e0eb4dd68\",\"dweb:/ipfs/QmNRxggY8qmjjuLnxggRqE8uBueuCktLwi9YYHagWoaEJ8\"]},\"contract/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xce48937a8007c580b8e2e35705738c922dd17540de89ebee6df06d2917a3f9fc\",\"urls\":[\"bzz-raw://1d117265103ee3efcd454d3aafb3e79a115f9bca6dec78a1229558eb30d14d05\",\"dweb:/ipfs/QmTm5Z1c7zzPiG3Cfj1eBMB23AeiEFGgvmTFQVaeEWXVCw\"]},\"contract/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xadbfb7028fb0f851dc848a48b9e54e7c89ffd2c2edc12fa4ba9bb383dfaa83d9\",\"urls\":[\"bzz-raw://90dceab42713246639100b87d6650037d68e4a2ab2dd4b5768c3ed35d6b3a4a0\",\"dweb:/ipfs/QmQ42UW5nchMoYP9bU9F1AJga5chG8j92fCPkURpiDKsCu\"]},\"contract/utils/Address.sol\":{\"keccak256\":\"0xf3358e5819ca73357abd6c90bdfffd0474af54364897f6b3e3234c4b71fbe9a1\",\"urls\":[\"bzz-raw://75ae8d04454d1511a2ed986cc8585736f05c5c25280683b3d24712a9f414a4bf\",\"dweb:/ipfs/Qmb3kNCoBUZdah1AgBBD4zMk898j5Qw8ahT1w5cCMYp5Y3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 60,
								"contract": "contract/token/ERC721/ERC721.sol:ERC721",
								"label": "_supportedInterfaces",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes4,t_bool)"
							},
							{
								"astId": 271,
								"contract": "contract/token/ERC721/ERC721.sol:ERC721",
								"label": "_tokenOwner",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 275,
								"contract": "contract/token/ERC721/ERC721.sol:ERC721",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 279,
								"contract": "contract/token/ERC721/ERC721.sol:ERC721",
								"label": "_ownedTokensCount",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_struct(Counter)8_storage)"
							},
							{
								"astId": 285,
								"contract": "contract/token/ERC721/ERC721.sol:ERC721",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes4": {
								"encoding": "inplace",
								"label": "bytes4",
								"numberOfBytes": "4"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_struct(Counter)8_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Counters.Counter)",
								"numberOfBytes": "32",
								"value": "t_struct(Counter)8_storage"
							},
							"t_mapping(t_bytes4,t_bool)": {
								"encoding": "mapping",
								"key": "t_bytes4",
								"label": "mapping(bytes4 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_struct(Counter)8_storage": {
								"encoding": "inplace",
								"label": "struct Counters.Counter",
								"members": [
									{
										"astId": 7,
										"contract": "contract/token/ERC721/ERC721.sol:ERC721",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"contract/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"methods": {
							"balanceOf(address)": {
								"details": "Returns the number of NFTs in `owner`'s account."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the NFT specified by `tokenId`."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Transfers a specific NFT (`tokenId`) from one account (`from`) to another (`to`).     *      * Requirements: - `from`, `to` cannot be zero. - `tokenId` must be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this NFT by either `approve` or `setApproveForAll`."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created.     * This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers a specific NFT (`tokenId`) from one account (`from`) to another (`to`).     * Requirements: - If the caller is not `from`, it must be approved to move this NFT by either `approve` or `setApproveForAll`."
							}
						}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs in `owner`'s account.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the NFT specified by `tokenId`.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers a specific NFT (`tokenId`) from one account (`from`) to another (`to`).     *      * Requirements: - `from`, `to` cannot be zero. - `tokenId` must be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this NFT by either `approve` or `setApproveForAll`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created.     * This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers a specific NFT (`tokenId`) from one account (`from`) to another (`to`).     * Requirements: - If the caller is not `from`, it must be approved to move this NFT by either `approve` or `setApproveForAll`.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contract/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contract/introspection/IERC165.sol\":{\"keccak256\":\"0x661553e43d7c4fbb2de504e5999fd5c104d367488350ed5bf023031bd1ba5ac5\",\"urls\":[\"bzz-raw://b40442c5b350b57b88a081a1eacd2bac962d4ecc1f029f5447a18986f08f6f14\",\"dweb:/ipfs/QmV7wjtRf11ibUHh4g8JjuhMpy68pPhV95L2y46UBoRfsZ\"]},\"contract/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xce48937a8007c580b8e2e35705738c922dd17540de89ebee6df06d2917a3f9fc\",\"urls\":[\"bzz-raw://1d117265103ee3efcd454d3aafb3e79a115f9bca6dec78a1229558eb30d14d05\",\"dweb:/ipfs/QmTm5Z1c7zzPiG3Cfj1eBMB23AeiEFGgvmTFQVaeEWXVCw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"contract/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "The ERC721 smart contract calls this function on the recipient after a `safeTransfer`. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.",
								"params": {
									"data": "Additional data with no specified format",
									"from": "The address which previously owned the token",
									"operator": "The address which called `safeTransferFrom` function",
									"tokenId": "The NFT identifier which is being transferred"
								},
								"return": "bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`"
							}
						},
						"title": "ERC721 token receiver interface"
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"The ERC721 smart contract calls this function on the recipient after a `safeTransfer`. This function MUST return the function selector, otherwise the caller will revert the transaction. The selector to be returned can be obtained as `this.onERC721Received.selector`. This function MAY throw to revert and reject the transfer. Note: the ERC721 contract address is always the message sender.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"operator\":\"The address which called `safeTransferFrom` function\",\"tokenId\":\"The NFT identifier which is being transferred\"},\"return\":\"bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\"}},\"title\":\"ERC721 token receiver interface\"},\"userdoc\":{\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handle the receipt of an NFT\"}}}},\"settings\":{\"compilationTarget\":{\"contract/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contract/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xadbfb7028fb0f851dc848a48b9e54e7c89ffd2c2edc12fa4ba9bb383dfaa83d9\",\"urls\":[\"bzz-raw://90dceab42713246639100b87d6650037d68e4a2ab2dd4b5768c3ed35d6b3a4a0\",\"dweb:/ipfs/QmQ42UW5nchMoYP9bU9F1AJga5chG8j92fCPkURpiDKsCu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"notice": "Handle the receipt of an NFT"
							}
						}
					}
				}
			},
			"contract/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type,",
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contract/utils/Address.sol\":94:957  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"contract/utils/Address.sol\":94:957  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a723158208a7101964adb78a3c5f810f866403e15c6c0e9c3cb195bdd0d30d82562e4e44c64736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158208a7101964adb78a3c5f810f866403e15c6c0e9c3cb195bdd0d30d82562e4e44c64736f6c63430005110032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DUP11 PUSH18 0x1964ADB78A3C5F810F866403E15C6C0E9C3 0xCB NOT JUMPDEST 0xDD 0xD ADDRESS 0xD8 0x25 PUSH3 0xE4E44C PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "94:863:7:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158208a7101964adb78a3c5f810f866403e15c6c0e9c3cb195bdd0d30d82562e4e44c64736f6c63430005110032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DUP11 PUSH18 0x1964ADB78A3C5F810F866403E15C6C0E9C3 0xCB NOT JUMPDEST 0xDD 0xD ADDRESS 0xD8 0x25 PUSH3 0xE4E44C PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "94:863:7:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"isContract(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 94,
									"end": 957,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 94,
									"end": 957,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a723158208a7101964adb78a3c5f810f866403e15c6c0e9c3cb195bdd0d30d82562e4e44c64736f6c63430005110032",
									".code": [
										{
											"begin": 94,
											"end": 957,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "ADDRESS"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "EQ"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "MSTORE"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type,\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contract/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contract/utils/Address.sol\":{\"keccak256\":\"0xf3358e5819ca73357abd6c90bdfffd0474af54364897f6b3e3234c4b71fbe9a1\",\"urls\":[\"bzz-raw://75ae8d04454d1511a2ed986cc8585736f05c5c25280683b3d24712a9f414a4bf\",\"dweb:/ipfs/Qmb3kNCoBUZdah1AgBBD4zMk898j5Qw8ahT1w5cCMYp5Y3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"contract/drafts/Counters.sol": {
				"ast": {
					"absolutePath": "contract/drafts/Counters.sol",
					"exportedSymbols": {
						"Counters": [
							48
						]
					},
					"id": 49,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"absolutePath": "contract/math/SafeMath.sol",
							"file": "../math/SafeMath.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 49,
							"sourceUnit": 244,
							"src": "25:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@title Counters\n@author Matt Condon (@shrugs)\n@dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\nof elements in a mapping, issuing ERC721 ids, or counting request ids.\n * Include with `using Counters for Counters.Counter;`\nSince it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\noverflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\ndirectly accessed.",
							"fullyImplemented": true,
							"id": 48,
							"linearizedBaseContracts": [
								48
							],
							"name": "Counters",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 5,
									"libraryName": {
										"contractScope": null,
										"id": 3,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 243,
										"src": "656:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$243",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "650:27:0",
									"typeName": {
										"id": 4,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "669:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "Counters.Counter",
									"id": 8,
									"members": [
										{
											"constant": false,
											"id": 7,
											"name": "_value",
											"nodeType": "VariableDeclaration",
											"scope": 8,
											"src": "1022:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 6,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1022:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"value": null,
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nodeType": "StructDefinition",
									"scope": 48,
									"src": "683:374:0",
									"visibility": "public"
								},
								{
									"body": {
										"id": 18,
										"nodeType": "Block",
										"src": "1137:38:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 15,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "1154:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 16,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 7,
													"src": "1154:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 14,
												"id": 17,
												"nodeType": "Return",
												"src": "1147:21:0"
											}
										]
									},
									"documentation": null,
									"id": 19,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"name": "counter",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "1080:23:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"contractScope": null,
													"id": 9,
													"name": "Counter",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 8,
													"src": "1080:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1079:25:0"
									},
									"returnParameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "1128:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1128:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1127:9:0"
									},
									"scope": 48,
									"src": "1063:112:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1234:36:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 28,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 24,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "1244:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 26,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 7,
														"src": "1244:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "31",
														"id": 27,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1262:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1244:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 29,
												"nodeType": "ExpressionStatement",
												"src": "1244:19:0"
											}
										]
									},
									"documentation": null,
									"id": 31,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"name": "counter",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "1200:23:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"contractScope": null,
													"id": 20,
													"name": "Counter",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 8,
													"src": "1200:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1199:25:0"
									},
									"returnParameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1234:0:0"
									},
									"scope": 48,
									"src": "1181:89:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 46,
										"nodeType": "Block",
										"src": "1329:55:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 44,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 36,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 33,
															"src": "1339:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 38,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 7,
														"src": "1339:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "31",
																"id": 42,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1375:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"expression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 39,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 33,
																	"src": "1356:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 40,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 7,
																"src": "1356:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 162,
															"src": "1356:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 43,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1356:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1339:38:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 45,
												"nodeType": "ExpressionStatement",
												"src": "1339:38:0"
											}
										]
									},
									"documentation": null,
									"id": 47,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"name": "counter",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "1295:23:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"contractScope": null,
													"id": 32,
													"name": "Counter",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 8,
													"src": "1295:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1294:25:0"
									},
									"returnParameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1329:0:0"
									},
									"scope": 48,
									"src": "1276:108:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 49,
							"src": "627:759:0"
						}
					],
					"src": "0:1387:0"
				},
				"id": 0
			},
			"contract/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "contract/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							100
						]
					},
					"id": 101,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 50,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:1"
						},
						{
							"absolutePath": "contract/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 51,
							"nodeType": "ImportDirective",
							"scope": 101,
							"sourceUnit": 111,
							"src": "25:23:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 52,
										"name": "IERC165",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 110,
										"src": "241:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC165_$110",
											"typeString": "contract IERC165"
										}
									},
									"id": 53,
									"nodeType": "InheritanceSpecifier",
									"src": "241:7:1"
								}
							],
							"contractDependencies": [
								110
							],
							"contractKind": "contract",
							"documentation": "@dev Implementation of the `IERC165` interface.\n * Contracts may inherit from this and call `_registerInterface` to declare\ntheir support of an interface.",
							"fullyImplemented": true,
							"id": 100,
							"linearizedBaseContracts": [
								100,
								110
							],
							"name": "ERC165",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 56,
									"name": "_INTERFACE_ID_ERC165",
									"nodeType": "VariableDeclaration",
									"scope": 100,
									"src": "338:57:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes4",
										"typeString": "bytes4"
									},
									"typeName": {
										"id": 54,
										"name": "bytes4",
										"nodeType": "ElementaryTypeName",
										"src": "338:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30783031666663396137",
										"id": 55,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "385:10:1",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_33540519_by_1",
											"typeString": "int_const 33540519"
										},
										"value": "0x01ffc9a7"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 60,
									"name": "_supportedInterfaces",
									"nodeType": "VariableDeclaration",
									"scope": 100,
									"src": "489:52:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
										"typeString": "mapping(bytes4 => bool)"
									},
									"typeName": {
										"id": 59,
										"keyType": {
											"id": 57,
											"name": "bytes4",
											"nodeType": "ElementaryTypeName",
											"src": "497:6:1",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes4",
												"typeString": "bytes4"
											}
										},
										"nodeType": "Mapping",
										"src": "489:23:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
											"typeString": "mapping(bytes4 => bool)"
										},
										"valueType": {
											"id": 58,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "507:4:1",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "572:193:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 64,
															"name": "_INTERFACE_ID_ERC165",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 56,
															"src": "737:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														],
														"id": 63,
														"name": "_registerInterface",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 99,
														"src": "718:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
															"typeString": "function (bytes4)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "718:40:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "718:40:1"
											}
										]
									},
									"documentation": null,
									"id": 68,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "560:2:1"
									},
									"returnParameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "572:0:1"
									},
									"scope": 100,
									"src": "548:217:1",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 79,
										"nodeType": "Block",
										"src": "991:57:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 75,
														"name": "_supportedInterfaces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 60,
														"src": "1008:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
															"typeString": "mapping(bytes4 => bool)"
														}
													},
													"id": 77,
													"indexExpression": {
														"argumentTypes": null,
														"id": 76,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 70,
														"src": "1029:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1008:33:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 74,
												"id": 78,
												"nodeType": "Return",
												"src": "1001:40:1"
											}
										]
									},
									"documentation": "@dev See `IERC165.supportsInterface`.\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.",
									"id": 80,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"name": "interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "942:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 69,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "942:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "941:20:1"
									},
									"returnParameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "985:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 72,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "985:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "984:6:1"
									},
									"scope": 100,
									"src": "915:133:1",
									"stateMutability": "view",
									"superFunction": 109,
									"visibility": "external"
								},
								{
									"body": {
										"id": 98,
										"nodeType": "Block",
										"src": "1499:133:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 88,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 86,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 82,
																"src": "1517:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30786666666666666666",
																"id": 87,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1532:10:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4294967295_by_1",
																	"typeString": "int_const 4294967295"
																},
																"value": "0xffffffff"
															},
															"src": "1517:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433136353a20696e76616c696420696e74657266616365206964",
															"id": 89,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1544:30:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_282912c0dfceceb28d77d0333f496b83948f9ba5b3154358a8b140b849289dee",
																"typeString": "literal_string \"ERC165: invalid interface id\""
															},
															"value": "ERC165: invalid interface id"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_282912c0dfceceb28d77d0333f496b83948f9ba5b3154358a8b140b849289dee",
																"typeString": "literal_string \"ERC165: invalid interface id\""
															}
														],
														"id": 85,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "1509:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1509:66:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 91,
												"nodeType": "ExpressionStatement",
												"src": "1509:66:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 92,
															"name": "_supportedInterfaces",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 60,
															"src": "1585:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
																"typeString": "mapping(bytes4 => bool)"
															}
														},
														"id": 94,
														"indexExpression": {
															"argumentTypes": null,
															"id": 93,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "1606:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1585:33:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "74727565",
														"id": 95,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1621:4:1",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1585:40:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 97,
												"nodeType": "ExpressionStatement",
												"src": "1585:40:1"
											}
										]
									},
									"documentation": "@dev Registers the contract as an implementer of the interface defined by\n`interfaceId`. Support of the actual ERC165 interface is automatic and\nregistering its interface id is not required.\n     * See `IERC165.supportsInterface`.\n     * Requirements:\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).",
									"id": 99,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_registerInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"name": "interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "1470:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 81,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1470:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1469:20:1"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1499:0:1"
									},
									"scope": 100,
									"src": "1442:190:1",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 101,
							"src": "222:1412:1"
						}
					],
					"src": "0:1635:1"
				},
				"id": 1
			},
			"contract/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "contract/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							110
						]
					},
					"id": 111,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 102,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:2"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": "@dev Interface of the ERC165 standard, as defined in the\n[EIP](https://eips.ethereum.org/EIPS/eip-165).\n * Implementers can declare support of contract interfaces, which can then be\nqueried by others (`ERC165Checker`).\n * For an implementation, see `ERC165`.",
							"fullyImplemented": false,
							"id": 110,
							"linearizedBaseContracts": [
								110
							],
							"name": "IERC165",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": "@dev Returns true if this contract implements the interface defined by\n`interfaceId`. See the corresponding\n[EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\nto learn more about how these ids are created.\n     * This function call must use less than 30 000 gas.",
									"id": 109,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"name": "interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 109,
												"src": "705:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 103,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "705:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "704:20:2"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 109,
												"src": "748:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 106,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "748:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "747:6:2"
									},
									"scope": 110,
									"src": "678:76:2",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								}
							],
							"scope": 111,
							"src": "307:449:2"
						}
					],
					"src": "0:757:2"
				},
				"id": 2
			},
			"contract/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "contract/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							243
						]
					},
					"id": 244,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 112,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:3"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.",
							"fullyImplemented": true,
							"id": 243,
							"linearizedBaseContracts": [
								243
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 136,
										"nodeType": "Block",
										"src": "901:109:3",
										"statements": [
											{
												"assignments": [
													122
												],
												"declarations": [
													{
														"constant": false,
														"id": 122,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 136,
														"src": "911:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 121,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "911:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 126,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 123,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 114,
														"src": "923:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 124,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 116,
														"src": "927:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "923:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "911:17:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 128,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 122,
																"src": "946:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 129,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 114,
																"src": "951:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "946:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 131,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "954:29:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 127,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "938:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "938:46:3",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 133,
												"nodeType": "ExpressionStatement",
												"src": "938:46:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 134,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 122,
													"src": "1002:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 120,
												"id": 135,
												"nodeType": "Return",
												"src": "995:8:3"
											}
										]
									},
									"documentation": "@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n- Addition cannot overflow.",
									"id": 137,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "847:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "847:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "858:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "846:22:3"
									},
									"returnParameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "892:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "891:9:3"
									},
									"scope": 243,
									"src": "834:176:3",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 161,
										"nodeType": "Block",
										"src": "1341:112:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 147,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 141,
																"src": "1359:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 148,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 139,
																"src": "1364:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1359:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 150,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1367:32:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 146,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "1351:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1351:49:3",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 152,
												"nodeType": "ExpressionStatement",
												"src": "1351:49:3"
											},
											{
												"assignments": [
													154
												],
												"declarations": [
													{
														"constant": false,
														"id": 154,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 161,
														"src": "1410:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 153,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1410:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 158,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 155,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "1422:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 156,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "1426:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1422:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1410:17:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 159,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 154,
													"src": "1445:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 145,
												"id": 160,
												"nodeType": "Return",
												"src": "1438:8:3"
											}
										]
									},
									"documentation": "@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.",
									"id": 162,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "1287:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1287:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 141,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "1298:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1286:22:3"
									},
									"returnParameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "1332:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 143,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1331:9:3"
									},
									"scope": 243,
									"src": "1274:179:3",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 195,
										"nodeType": "Block",
										"src": "1760:392:3",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 171,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 164,
														"src": "1992:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 172,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1997:1:3",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1992:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 177,
												"nodeType": "IfStatement",
												"src": "1988:45:3",
												"trueBody": {
													"id": 176,
													"nodeType": "Block",
													"src": "2000:33:3",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 174,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2021:1:3",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 170,
															"id": 175,
															"nodeType": "Return",
															"src": "2014:8:3"
														}
													]
												}
											},
											{
												"assignments": [
													179
												],
												"declarations": [
													{
														"constant": false,
														"id": 179,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 195,
														"src": "2043:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 178,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2043:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 183,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 180,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 164,
														"src": "2055:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 181,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 166,
														"src": "2059:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2055:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2043:17:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 189,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 187,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 185,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 179,
																	"src": "2078:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 186,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "2082:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2078:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 188,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 166,
																"src": "2087:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2078:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 190,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2090:35:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 184,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "2070:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2070:56:3",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 192,
												"nodeType": "ExpressionStatement",
												"src": "2070:56:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 193,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 179,
													"src": "2144:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 170,
												"id": 194,
												"nodeType": "Return",
												"src": "2137:8:3"
											}
										]
									},
									"documentation": "@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n- Multiplication cannot overflow.",
									"id": 196,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 196,
												"src": "1706:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1706:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 196,
												"src": "1717:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1717:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1705:22:3"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 196,
												"src": "1751:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1751:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1750:9:3"
									},
									"scope": 243,
									"src": "1693:459:3",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 220,
										"nodeType": "Block",
										"src": "2674:259:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 208,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 206,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 200,
																"src": "2758:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 207,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2762:1:3",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2758:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 209,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2765:28:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 205,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "2750:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2750:44:3",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 211,
												"nodeType": "ExpressionStatement",
												"src": "2750:44:3"
											},
											{
												"assignments": [
													213
												],
												"declarations": [
													{
														"constant": false,
														"id": 213,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 220,
														"src": "2804:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 212,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2804:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 217,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 214,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 198,
														"src": "2816:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 215,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 200,
														"src": "2820:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2816:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2804:17:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 218,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 213,
													"src": "2925:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 204,
												"id": 219,
												"nodeType": "Return",
												"src": "2918:8:3"
											}
										]
									},
									"documentation": "@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
									"id": 221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2620:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2620:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 200,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2631:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2631:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2619:22:3"
									},
									"returnParameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2665:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2665:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2664:9:3"
									},
									"scope": 243,
									"src": "2607:326:3",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 241,
										"nodeType": "Block",
										"src": "3444:82:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 233,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 231,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 225,
																"src": "3462:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 232,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3467:1:3",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3462:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 234,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3470:26:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 230,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "3454:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3454:43:3",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 236,
												"nodeType": "ExpressionStatement",
												"src": "3454:43:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 237,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 223,
														"src": "3514:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 238,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 225,
														"src": "3518:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3514:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 229,
												"id": 240,
												"nodeType": "Return",
												"src": "3507:12:3"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
									"id": 242,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "3390:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3390:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "3401:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3401:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3389:22:3"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "3435:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3435:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3434:9:3"
									},
									"scope": 243,
									"src": "3377:149:3",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 244,
							"src": "589:2939:3"
						}
					],
					"src": "0:3529:3"
				},
				"id": 3
			},
			"contract/token/ERC721/ERC721.sol": {
				"ast": {
					"absolutePath": "contract/token/ERC721/ERC721.sol",
					"exportedSymbols": {
						"ERC721": [
							808
						]
					},
					"id": 809,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 245,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:4"
						},
						{
							"absolutePath": "contract/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 246,
							"nodeType": "ImportDirective",
							"scope": 809,
							"sourceUnit": 912,
							"src": "25:23:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contract/token/ERC721/IERC721Receiver.sol",
							"file": "./IERC721Receiver.sol",
							"id": 247,
							"nodeType": "ImportDirective",
							"scope": 809,
							"sourceUnit": 928,
							"src": "49:31:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contract/math/SafeMath.sol",
							"file": "../../math/SafeMath.sol",
							"id": 248,
							"nodeType": "ImportDirective",
							"scope": 809,
							"sourceUnit": 244,
							"src": "81:33:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contract/utils/Address.sol",
							"file": "../../utils/Address.sol",
							"id": 249,
							"nodeType": "ImportDirective",
							"scope": 809,
							"sourceUnit": 947,
							"src": "115:33:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contract/drafts/Counters.sol",
							"file": "../../drafts/Counters.sol",
							"id": 250,
							"nodeType": "ImportDirective",
							"scope": 809,
							"sourceUnit": 49,
							"src": "149:35:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contract/introspection/ERC165.sol",
							"file": "../../introspection/ERC165.sol",
							"id": 251,
							"nodeType": "ImportDirective",
							"scope": 809,
							"sourceUnit": 101,
							"src": "185:40:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 252,
										"name": "ERC165",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 100,
										"src": "371:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC165_$100",
											"typeString": "contract ERC165"
										}
									},
									"id": 253,
									"nodeType": "InheritanceSpecifier",
									"src": "371:6:4"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 254,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 911,
										"src": "379:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$911",
											"typeString": "contract IERC721"
										}
									},
									"id": 255,
									"nodeType": "InheritanceSpecifier",
									"src": "379:7:4"
								}
							],
							"contractDependencies": [
								100,
								110,
								911
							],
							"contractKind": "contract",
							"documentation": "@title ERC721 Non-Fungible Token Standard basic implementation\n@dev see https://eips.ethereum.org/EIPS/eip-721",
							"fullyImplemented": true,
							"id": 808,
							"linearizedBaseContracts": [
								808,
								911,
								100,
								110
							],
							"name": "ERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 258,
									"libraryName": {
										"contractScope": null,
										"id": 256,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 243,
										"src": "399:8:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$243",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "393:27:4",
									"typeName": {
										"id": 257,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "412:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 261,
									"libraryName": {
										"contractScope": null,
										"id": 259,
										"name": "Address",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 946,
										"src": "431:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Address_$946",
											"typeString": "library Address"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "425:26:4",
									"typeName": {
										"id": 260,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "443:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"id": 264,
									"libraryName": {
										"contractScope": null,
										"id": 262,
										"name": "Counters",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 48,
										"src": "462:8:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Counters_$48",
											"typeString": "library Counters"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "456:36:4",
									"typeName": {
										"contractScope": null,
										"id": 263,
										"name": "Counters.Counter",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 8,
										"src": "475:16:4",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									}
								},
								{
									"constant": true,
									"id": 267,
									"name": "_ERC721_RECEIVED",
									"nodeType": "VariableDeclaration",
									"scope": 808,
									"src": "670:53:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes4",
										"typeString": "bytes4"
									},
									"typeName": {
										"id": 265,
										"name": "bytes4",
										"nodeType": "ElementaryTypeName",
										"src": "670:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30783135306237613032",
										"id": 266,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "713:10:4",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_353073666_by_1",
											"typeString": "int_const 353073666"
										},
										"value": "0x150b7a02"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 271,
									"name": "_tokenOwner",
									"nodeType": "VariableDeclaration",
									"scope": 808,
									"src": "768:48:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 270,
										"keyType": {
											"id": 268,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "777:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "768:28:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 269,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "788:7:4",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 275,
									"name": "_tokenApprovals",
									"nodeType": "VariableDeclaration",
									"scope": 808,
									"src": "872:52:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 274,
										"keyType": {
											"id": 272,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "881:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "872:28:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 273,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "892:7:4",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 279,
									"name": "_ownedTokensCount",
									"nodeType": "VariableDeclaration",
									"scope": 808,
									"src": "982:63:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$8_storage_$",
										"typeString": "mapping(address => struct Counters.Counter)"
									},
									"typeName": {
										"id": 278,
										"keyType": {
											"id": 276,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "991:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "982:37:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$8_storage_$",
											"typeString": "mapping(address => struct Counters.Counter)"
										},
										"valueType": {
											"contractScope": null,
											"id": 277,
											"name": "Counters.Counter",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 8,
											"src": "1002:16:4",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Counter_$8_storage_ptr",
												"typeString": "struct Counters.Counter"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 285,
									"name": "_operatorApprovals",
									"nodeType": "VariableDeclaration",
									"scope": 808,
									"src": "1100:73:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 284,
										"keyType": {
											"id": 280,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1109:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1100:46:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueType": {
											"id": 283,
											"keyType": {
												"id": 281,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1129:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1120:25:4",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueType": {
												"id": 282,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1140:4:4",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 288,
									"name": "_INTERFACE_ID_ERC721",
									"nodeType": "VariableDeclaration",
									"scope": 808,
									"src": "2047:57:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes4",
										"typeString": "bytes4"
									},
									"typeName": {
										"id": 286,
										"name": "bytes4",
										"nodeType": "ElementaryTypeName",
										"src": "2047:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30783830616335386364",
										"id": 287,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2094:10:4",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2158778573_by_1",
											"typeString": "int_const 2158778573"
										},
										"value": "0x80ac58cd"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 295,
										"nodeType": "Block",
										"src": "2133:134:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 292,
															"name": "_INTERFACE_ID_ERC721",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "2239:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														],
														"id": 291,
														"name": "_registerInterface",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 99,
														"src": "2220:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
															"typeString": "function (bytes4)"
														}
													},
													"id": 293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2220:40:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 294,
												"nodeType": "ExpressionStatement",
												"src": "2220:40:4"
											}
										]
									},
									"documentation": null,
									"id": 296,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2123:2:4"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2133:0:4"
									},
									"scope": 808,
									"src": "2111:156:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 318,
										"nodeType": "Block",
										"src": "2535:143:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 304,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 298,
																"src": "2553:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 306,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2570:1:4",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 305,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2562:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 307,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2562:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2553:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373",
															"id": 309,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2574:44:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba",
																"typeString": "literal_string \"ERC721: balance query for the zero address\""
															},
															"value": "ERC721: balance query for the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba",
																"typeString": "literal_string \"ERC721: balance query for the zero address\""
															}
														],
														"id": 303,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "2545:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2545:74:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 311,
												"nodeType": "ExpressionStatement",
												"src": "2545:74:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 312,
																"name": "_ownedTokensCount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 279,
																"src": "2637:17:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$8_storage_$",
																	"typeString": "mapping(address => struct Counters.Counter storage ref)"
																}
															},
															"id": 314,
															"indexExpression": {
																"argumentTypes": null,
																"id": 313,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 298,
																"src": "2655:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2637:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$8_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 315,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "current",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 19,
														"src": "2637:32:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$8_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$8_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2637:34:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 302,
												"id": 317,
												"nodeType": "Return",
												"src": "2630:41:4"
											}
										]
									},
									"documentation": "@dev Gets the balance of the specified address.\n@param owner address to query the balance of\n@return uint256 representing the amount owned by the passed address",
									"id": 319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "2490:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2490:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2489:15:4"
									},
									"returnParameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "2526:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2526:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2525:9:4"
									},
									"scope": 808,
									"src": "2471:207:4",
									"stateMutability": "view",
									"superFunction": 844,
									"visibility": "public"
								},
								{
									"body": {
										"id": 343,
										"nodeType": "Block",
										"src": "2961:159:4",
										"statements": [
											{
												"assignments": [
													327
												],
												"declarations": [
													{
														"constant": false,
														"id": 327,
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 343,
														"src": "2971:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 326,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2971:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 331,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 328,
														"name": "_tokenOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 271,
														"src": "2987:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 330,
													"indexExpression": {
														"argumentTypes": null,
														"id": 329,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "2999:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2987:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2971:36:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 337,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 333,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 327,
																"src": "3025:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 335,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3042:1:4",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3034:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 336,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3034:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "3025:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e",
															"id": 338,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3046:43:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397",
																"typeString": "literal_string \"ERC721: owner query for nonexistent token\""
															},
															"value": "ERC721: owner query for nonexistent token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397",
																"typeString": "literal_string \"ERC721: owner query for nonexistent token\""
															}
														],
														"id": 332,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "3017:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3017:73:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 340,
												"nodeType": "ExpressionStatement",
												"src": "3017:73:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 341,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 327,
													"src": "3108:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 325,
												"id": 342,
												"nodeType": "Return",
												"src": "3101:12:4"
											}
										]
									},
									"documentation": "@dev Gets the owner of the specified token ID.\n@param tokenId uint256 ID of the token to query the owner of\n@return address currently marked as the owner of the given token ID",
									"id": 344,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "2914:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2914:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2913:17:4"
									},
									"returnParameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 324,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "2952:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 323,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2952:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2951:9:4"
									},
									"scope": 808,
									"src": "2897:223:4",
									"stateMutability": "view",
									"superFunction": 851,
									"visibility": "public"
								},
								{
									"body": {
										"id": 390,
										"nodeType": "Block",
										"src": "3594:358:4",
										"statements": [
											{
												"assignments": [
													352
												],
												"declarations": [
													{
														"constant": false,
														"id": 352,
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 390,
														"src": "3604:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 351,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3604:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 356,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 354,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "3628:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 353,
														"name": "ownerOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															344
														],
														"referencedDeclaration": 344,
														"src": "3620:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3620:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3604:32:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 358,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 346,
																"src": "3654:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 359,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 352,
																"src": "3660:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3654:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3667:35:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																"typeString": "literal_string \"ERC721: approval to current owner\""
															},
															"value": "ERC721: approval to current owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
																"typeString": "literal_string \"ERC721: approval to current owner\""
															}
														],
														"id": 357,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "3646:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3646:57:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "3646:57:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 374,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 368,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 365,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 961,
																		"src": "3722:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 366,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "3722:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 367,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 352,
																	"src": "3736:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "3722:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 370,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 352,
																		"src": "3762:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 371,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 961,
																			"src": "3769:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 372,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "3769:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	],
																	"id": 369,
																	"name": "isApprovedForAll",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		458
																	],
																	"referencedDeclaration": 458,
																	"src": "3745:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address,address) view returns (bool)"
																	}
																},
																"id": 373,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3745:35:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3722:58:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c",
															"id": 375,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3794:58:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d",
																"typeString": "literal_string \"ERC721: approve caller is not owner nor approved for all\""
															},
															"value": "ERC721: approve caller is not owner nor approved for all"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d",
																"typeString": "literal_string \"ERC721: approve caller is not owner nor approved for all\""
															}
														],
														"id": 364,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "3714:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3714:148:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 377,
												"nodeType": "ExpressionStatement",
												"src": "3714:148:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 378,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 275,
															"src": "3873:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 380,
														"indexExpression": {
															"argumentTypes": null,
															"id": 379,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "3889:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3873:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 381,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "3900:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3873:29:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 383,
												"nodeType": "ExpressionStatement",
												"src": "3873:29:4"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 385,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "3926:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 386,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 346,
															"src": "3933:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 387,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "3937:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 384,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 829,
														"src": "3917:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3917:28:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 389,
												"nodeType": "EmitStatement",
												"src": "3912:33:4"
											}
										]
									},
									"documentation": "@dev Approves another address to transfer the given token ID\nThe zero address indicates there is no approved address.\nThere can only be one approved address per token at a given time.\nCan only be called by the token owner or an approved operator.\n@param to address to be approved for the given token ID\n@param tokenId uint256 ID of the token to be approved",
									"id": 391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 346,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "3558:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3558:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 348,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "3570:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3570:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3557:29:4"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3594:0:4"
									},
									"scope": 808,
									"src": "3541:411:4",
									"stateMutability": "nonpayable",
									"superFunction": 876,
									"visibility": "public"
								},
								{
									"body": {
										"id": 409,
										"nodeType": "Block",
										"src": "4305:132:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 400,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 393,
																	"src": "4331:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 399,
																"name": "_exists",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 548,
																"src": "4323:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view returns (bool)"
																}
															},
															"id": 401,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4323:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e",
															"id": 402,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4341:46:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d",
																"typeString": "literal_string \"ERC721: approved query for nonexistent token\""
															},
															"value": "ERC721: approved query for nonexistent token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d",
																"typeString": "literal_string \"ERC721: approved query for nonexistent token\""
															}
														],
														"id": 398,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "4315:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4315:73:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 404,
												"nodeType": "ExpressionStatement",
												"src": "4315:73:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 405,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 275,
														"src": "4406:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 407,
													"indexExpression": {
														"argumentTypes": null,
														"id": 406,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "4422:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4406:24:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 397,
												"id": 408,
												"nodeType": "Return",
												"src": "4399:31:4"
											}
										]
									},
									"documentation": "@dev Gets the approved address for a token ID, or zero if no address set\nReverts if the token ID does not exist.\n@param tokenId uint256 ID of the token to query the approval of\n@return address currently approved for the given token ID",
									"id": 410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "4258:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 392,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4257:17:4"
									},
									"returnParameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 396,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "4296:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4295:9:4"
									},
									"scope": 808,
									"src": "4237:200:4",
									"stateMutability": "view",
									"superFunction": 883,
									"visibility": "public"
								},
								{
									"body": {
										"id": 441,
										"nodeType": "Block",
										"src": "4791:182:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 418,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "4809:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 419,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 961,
																	"src": "4815:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 420,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "4815:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "4809:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
															"id": 422,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4827:27:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																"typeString": "literal_string \"ERC721: approve to caller\""
															},
															"value": "ERC721: approve to caller"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
																"typeString": "literal_string \"ERC721: approve to caller\""
															}
														],
														"id": 417,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "4801:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4801:54:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 424,
												"nodeType": "ExpressionStatement",
												"src": "4801:54:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 425,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 285,
																"src": "4866:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 429,
															"indexExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 426,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 961,
																	"src": "4885:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 427,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "4885:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4866:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 430,
														"indexExpression": {
															"argumentTypes": null,
															"id": 428,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "4897:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4866:34:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 431,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "4903:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4866:45:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 433,
												"nodeType": "ExpressionStatement",
												"src": "4866:45:4"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 435,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 961,
																"src": "4941:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 436,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "4941:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 437,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "4953:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 438,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 414,
															"src": "4957:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 434,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 837,
														"src": "4926:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4926:40:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 440,
												"nodeType": "EmitStatement",
												"src": "4921:45:4"
											}
										]
									},
									"documentation": "@dev Sets or unsets the approval of a given operator\nAn operator is allowed to transfer all tokens of the sender on their behalf.\n@param to operator address to set the approval\n@param approved representing the status of the approval to be set",
									"id": 442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "4757:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4757:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "4769:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 413,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4769:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4756:27:4"
									},
									"returnParameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4791:0:4"
									},
									"scope": 808,
									"src": "4730:243:4",
									"stateMutability": "nonpayable",
									"superFunction": 890,
									"visibility": "public"
								},
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "5381:59:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 451,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 285,
															"src": "5398:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 453,
														"indexExpression": {
															"argumentTypes": null,
															"id": 452,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 444,
															"src": "5417:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5398:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 455,
													"indexExpression": {
														"argumentTypes": null,
														"id": 454,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 446,
														"src": "5424:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5398:35:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 450,
												"id": 456,
												"nodeType": "Return",
												"src": "5391:42:4"
											}
										]
									},
									"documentation": "@dev Tells whether an operator is approved by a given owner.\n@param owner owner address which you want to query the approval of\n@param operator operator address which you want to query the approval of\n@return bool whether the given operator is approved by the given owner",
									"id": 458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "5321:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5321:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "5336:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 445,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5336:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5320:33:4"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "5375:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 448,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5375:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5374:6:4"
									},
									"scope": 808,
									"src": "5295:145:4",
									"stateMutability": "view",
									"superFunction": 899,
									"visibility": "public"
								},
								{
									"body": {
										"id": 482,
										"nodeType": "Block",
										"src": "5949:213:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 469,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 961,
																		"src": "6038:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "6038:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 471,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 464,
																	"src": "6050:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 468,
																"name": "_isApprovedOrOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 587,
																"src": "6019:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) view returns (bool)"
																}
															},
															"id": 472,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6019:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
															"id": 473,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6060:51:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
																"typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
															},
															"value": "ERC721: transfer caller is not owner nor approved"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
																"typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
															}
														],
														"id": 467,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "6011:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6011:101:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 475,
												"nodeType": "ExpressionStatement",
												"src": "6011:101:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 477,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 460,
															"src": "6137:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 478,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "6143:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 479,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 464,
															"src": "6147:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 476,
														"name": "_transferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 744,
														"src": "6123:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 480,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6123:32:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 481,
												"nodeType": "ExpressionStatement",
												"src": "6123:32:4"
											}
										]
									},
									"documentation": "@dev Transfers the ownership of a given token ID to another address.\nUsage of this method is discouraged, use `safeTransferFrom` whenever possible.\nRequires the msg.sender to be the owner, approved, or operator.\n@param from current owner of the token\n@param to address to receive the ownership of the given token ID\n@param tokenId uint256 ID of the token to be transferred",
									"id": 483,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "5899:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 459,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5899:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 462,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "5913:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5913:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 464,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "5925:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 463,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5925:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5898:43:4"
									},
									"returnParameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5949:0:4"
									},
									"scope": 808,
									"src": "5877:285:4",
									"stateMutability": "nonpayable",
									"superFunction": 869,
									"visibility": "public"
								},
								{
									"body": {
										"id": 499,
										"nodeType": "Block",
										"src": "6871:56:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 493,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 485,
															"src": "6898:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 494,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "6904:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 495,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "6908:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "",
															"id": 496,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6917:2:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 492,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															500,
															528
														],
														"referencedDeclaration": 528,
														"src": "6881:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6881:39:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 498,
												"nodeType": "ExpressionStatement",
												"src": "6881:39:4"
											}
										]
									},
									"documentation": "@dev Safely transfers the ownership of a given token ID to another address\nIf the target address is a contract, it must implement `onERC721Received`,\nwhich is called upon a safe transfer, and return the magic value\n`bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\nthe transfer is reverted.\nRequires the msg.sender to be the owner, approved, or operator\n@param from current owner of the token\n@param to address to receive the ownership of the given token ID\n@param tokenId uint256 ID of the token to be transferred",
									"id": 500,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 500,
												"src": "6821:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6821:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 487,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 500,
												"src": "6835:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6835:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 500,
												"src": "6847:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6847:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6820:43:4"
									},
									"returnParameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6871:0:4"
									},
									"scope": 808,
									"src": "6795:132:4",
									"stateMutability": "nonpayable",
									"superFunction": 860,
									"visibility": "public"
								},
								{
									"body": {
										"id": 527,
										"nodeType": "Block",
										"src": "7728:169:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 512,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 502,
															"src": "7751:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 513,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 504,
															"src": "7757:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 514,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 506,
															"src": "7761:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 511,
														"name": "transferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															483
														],
														"referencedDeclaration": 483,
														"src": "7738:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7738:31:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 516,
												"nodeType": "ExpressionStatement",
												"src": "7738:31:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 519,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 502,
																	"src": "7810:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 520,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 504,
																	"src": "7816:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 521,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 506,
																	"src": "7820:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 522,
																	"name": "_data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 508,
																	"src": "7829:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 518,
																"name": "_checkOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 784,
																"src": "7787:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7787:48:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
															"id": 524,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7837:52:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															},
															"value": "ERC721: transfer to non ERC721Receiver implementer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
																"typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
															}
														],
														"id": 517,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "7779:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7779:111:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 526,
												"nodeType": "ExpressionStatement",
												"src": "7779:111:4"
											}
										]
									},
									"documentation": "@dev Safely transfers the ownership of a given token ID to another address\nIf the target address is a contract, it must implement `onERC721Received`,\nwhich is called upon a safe transfer, and return the magic value\n`bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\nthe transfer is reverted.\nRequires the msg.sender to be the owner, approved, or operator\n@param from current owner of the token\n@param to address to receive the ownership of the given token ID\n@param tokenId uint256 ID of the token to be transferred\n@param _data bytes data to send along with a safe transfer check",
									"id": 528,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 502,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "7658:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 501,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7658:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 504,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "7672:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 503,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7672:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 506,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "7684:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 505,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7684:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 508,
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "7701:18:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 507,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7701:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7657:63:4"
									},
									"returnParameters": {
										"id": 510,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7728:0:4"
									},
									"scope": 808,
									"src": "7632:265:4",
									"stateMutability": "nonpayable",
									"superFunction": 910,
									"visibility": "public"
								},
								{
									"body": {
										"id": 547,
										"nodeType": "Block",
										"src": "8155:89:4",
										"statements": [
											{
												"assignments": [
													536
												],
												"declarations": [
													{
														"constant": false,
														"id": 536,
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 547,
														"src": "8165:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 535,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8165:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 540,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 537,
														"name": "_tokenOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 271,
														"src": "8181:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 539,
													"indexExpression": {
														"argumentTypes": null,
														"id": 538,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "8193:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8181:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8165:36:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 541,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 536,
														"src": "8218:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 543,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8235:1:4",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 542,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8227:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": "address"
														},
														"id": 544,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "8218:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 534,
												"id": 546,
												"nodeType": "Return",
												"src": "8211:26:4"
											}
										]
									},
									"documentation": "@dev Returns whether the specified token exists.\n@param tokenId uint256 ID of the token to query the existence of\n@return bool whether the token exists",
									"id": 548,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exists",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "8109:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8109:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8108:17:4"
									},
									"returnParameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 533,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "8149:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 532,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8149:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8148:6:4"
									},
									"scope": 808,
									"src": "8092:152:4",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 586,
										"nodeType": "Block",
										"src": "8696:238:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 559,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 552,
																	"src": "8722:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 558,
																"name": "_exists",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 548,
																"src": "8714:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view returns (bool)"
																}
															},
															"id": 560,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8714:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e",
															"id": 561,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8732:46:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c",
																"typeString": "literal_string \"ERC721: operator query for nonexistent token\""
															},
															"value": "ERC721: operator query for nonexistent token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c",
																"typeString": "literal_string \"ERC721: operator query for nonexistent token\""
															}
														],
														"id": 557,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "8706:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 562,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8706:73:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 563,
												"nodeType": "ExpressionStatement",
												"src": "8706:73:4"
											},
											{
												"assignments": [
													565
												],
												"declarations": [
													{
														"constant": false,
														"id": 565,
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 586,
														"src": "8789:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 564,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8789:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 569,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 567,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 552,
															"src": "8813:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 566,
														"name": "ownerOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															344
														],
														"referencedDeclaration": 344,
														"src": "8805:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 568,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8805:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8789:32:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 578,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 572,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"id": 570,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 550,
																		"src": "8839:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"argumentTypes": null,
																		"id": 571,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 565,
																		"src": "8850:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "8839:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 574,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 552,
																				"src": "8871:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 573,
																			"name": "getApproved",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				410
																			],
																			"referencedDeclaration": 410,
																			"src": "8859:11:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																				"typeString": "function (uint256) view returns (address)"
																			}
																		},
																		"id": 575,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8859:20:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"argumentTypes": null,
																		"id": 576,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 550,
																		"src": "8883:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "8859:31:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "8839:51:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 580,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 565,
																		"src": "8911:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 581,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 550,
																		"src": "8918:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 579,
																	"name": "isApprovedForAll",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		458
																	],
																	"referencedDeclaration": 458,
																	"src": "8894:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address,address) view returns (bool)"
																	}
																},
																"id": 582,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8894:32:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "8839:87:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 584,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "8838:89:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 556,
												"id": 585,
												"nodeType": "Return",
												"src": "8831:96:4"
											}
										]
									},
									"documentation": "@dev Returns whether the given spender can transfer a given token ID.\n@param spender address of the spender to query\n@param tokenId uint256 ID of the token to be transferred\n@return bool whether the msg.sender is approved for the given token ID,\nis an operator of the owner, or is the owner of the token",
									"id": 587,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isApprovedOrOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 550,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "8633:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 549,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8633:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 552,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "8650:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 551,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8650:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8632:34:4"
									},
									"returnParameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 555,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "8690:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 554,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8690:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8689:6:4"
									},
									"scope": 808,
									"src": "8605:329:4",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 631,
										"nodeType": "Block",
										"src": "9232:274:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 599,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 595,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 589,
																"src": "9250:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 597,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9264:1:4",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 596,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9256:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 598,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9256:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "9250:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 600,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9268:34:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
																"typeString": "literal_string \"ERC721: mint to the zero address\""
															},
															"value": "ERC721: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
																"typeString": "literal_string \"ERC721: mint to the zero address\""
															}
														],
														"id": 594,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "9242:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9242:61:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 602,
												"nodeType": "ExpressionStatement",
												"src": "9242:61:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 607,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "9321:17:4",
															"subExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 605,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 591,
																		"src": "9330:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 604,
																	"name": "_exists",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 548,
																	"src": "9322:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (uint256) view returns (bool)"
																	}
																},
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9322:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
															"id": 608,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9340:30:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															},
															"value": "ERC721: token already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
																"typeString": "literal_string \"ERC721: token already minted\""
															}
														],
														"id": 603,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "9313:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9313:58:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 610,
												"nodeType": "ExpressionStatement",
												"src": "9313:58:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 611,
															"name": "_tokenOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 271,
															"src": "9382:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 613,
														"indexExpression": {
															"argumentTypes": null,
															"id": 612,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 591,
															"src": "9394:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9382:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 614,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 589,
														"src": "9405:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9382:25:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 616,
												"nodeType": "ExpressionStatement",
												"src": "9382:25:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 617,
																"name": "_ownedTokensCount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 279,
																"src": "9417:17:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$8_storage_$",
																	"typeString": "mapping(address => struct Counters.Counter storage ref)"
																}
															},
															"id": 619,
															"indexExpression": {
																"argumentTypes": null,
																"id": 618,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 589,
																"src": "9435:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9417:21:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$8_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 620,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 31,
														"src": "9417:31:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$8_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$8_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9417:33:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 622,
												"nodeType": "ExpressionStatement",
												"src": "9417:33:4"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 625,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9483:1:4",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 624,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9475:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 626,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9475:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 627,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 589,
															"src": "9487:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 628,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 591,
															"src": "9491:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 623,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 821,
														"src": "9466:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9466:33:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 630,
												"nodeType": "EmitStatement",
												"src": "9461:38:4"
											}
										]
									},
									"documentation": "@dev Internal function to mint a new token.\nReverts if the given token ID already exists.\n@param to The address that will own the minted token\n@param tokenId uint256 ID of the token to be minted",
									"id": 632,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "9194:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 588,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9194:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 591,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "9206:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 590,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9206:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "9193:29:4"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9232:0:4"
									},
									"scope": 808,
									"src": "9179:327:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 674,
										"nodeType": "Block",
										"src": "9837:268:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 644,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 641,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 636,
																		"src": "9863:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 640,
																	"name": "ownerOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		344
																	],
																	"referencedDeclaration": 344,
																	"src": "9855:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 642,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9855:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 643,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "9875:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9855:25:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e",
															"id": 645,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9882:39:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d9af5b321f427d3820b5fc07b432b1ddf1bb6411d5d926d9de9773fd616ab5ee",
																"typeString": "literal_string \"ERC721: burn of token that is not own\""
															},
															"value": "ERC721: burn of token that is not own"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d9af5b321f427d3820b5fc07b432b1ddf1bb6411d5d926d9de9773fd616ab5ee",
																"typeString": "literal_string \"ERC721: burn of token that is not own\""
															}
														],
														"id": 639,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "9847:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9847:75:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 647,
												"nodeType": "ExpressionStatement",
												"src": "9847:75:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 649,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "9948:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 648,
														"name": "_clearApproval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 807,
														"src": "9933:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9933:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 651,
												"nodeType": "ExpressionStatement",
												"src": "9933:23:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 652,
																"name": "_ownedTokensCount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 279,
																"src": "9967:17:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$8_storage_$",
																	"typeString": "mapping(address => struct Counters.Counter storage ref)"
																}
															},
															"id": 654,
															"indexExpression": {
																"argumentTypes": null,
																"id": 653,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "9985:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9967:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$8_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 655,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decrement",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 47,
														"src": "9967:34:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$8_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$8_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 656,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9967:36:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 657,
												"nodeType": "ExpressionStatement",
												"src": "9967:36:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 658,
															"name": "_tokenOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 271,
															"src": "10013:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 660,
														"indexExpression": {
															"argumentTypes": null,
															"id": 659,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "10025:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10013:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10044:1:4",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 661,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10036:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": "address"
														},
														"id": 663,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10036:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "10013:33:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 665,
												"nodeType": "ExpressionStatement",
												"src": "10013:33:4"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 667,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 634,
															"src": "10071:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 669,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10086:1:4",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 668,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10078:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10078:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 671,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "10090:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 666,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 821,
														"src": "10062:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10062:36:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 673,
												"nodeType": "EmitStatement",
												"src": "10057:41:4"
											}
										]
									},
									"documentation": "@dev Internal function to burn a specific token.\nReverts if the token does not exist.\nDeprecated, use _burn(uint256) instead.\n@param owner owner of the token to burn\n@param tokenId uint256 ID of the token being burned",
									"id": 675,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "9796:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9796:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "9811:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9811:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "9795:32:4"
									},
									"returnParameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9837:0:4"
									},
									"scope": 808,
									"src": "9781:324:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 687,
										"nodeType": "Block",
										"src": "10327:49:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 682,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 677,
																	"src": "10351:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 681,
																"name": "ownerOf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	344
																],
																"referencedDeclaration": 344,
																"src": "10343:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																	"typeString": "function (uint256) view returns (address)"
																}
															},
															"id": 683,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10343:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 684,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "10361:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 680,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															675,
															688
														],
														"referencedDeclaration": 675,
														"src": "10337:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 685,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10337:32:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 686,
												"nodeType": "ExpressionStatement",
												"src": "10337:32:4"
											}
										]
									},
									"documentation": "@dev Internal function to burn a specific token.\nReverts if the token does not exist.\n@param tokenId uint256 ID of the token being burned",
									"id": 688,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "10301:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10301:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "10300:17:4"
									},
									"returnParameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10327:0:4"
									},
									"scope": 808,
									"src": "10286:90:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 743,
										"nodeType": "Block",
										"src": "10826:372:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 702,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 699,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 694,
																		"src": "10852:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 698,
																	"name": "ownerOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		344
																	],
																	"referencedDeclaration": 344,
																	"src": "10844:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 700,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10844:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 701,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 690,
																"src": "10864:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10844:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e",
															"id": 703,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10870:43:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950",
																"typeString": "literal_string \"ERC721: transfer of token that is not own\""
															},
															"value": "ERC721: transfer of token that is not own"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950",
																"typeString": "literal_string \"ERC721: transfer of token that is not own\""
															}
														],
														"id": 697,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "10836:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10836:78:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 705,
												"nodeType": "ExpressionStatement",
												"src": "10836:78:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 711,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 707,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 692,
																"src": "10932:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 709,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10946:1:4",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 708,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10938:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 710,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10938:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "10932:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 712,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10950:38:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
																"typeString": "literal_string \"ERC721: transfer to the zero address\""
															},
															"value": "ERC721: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
																"typeString": "literal_string \"ERC721: transfer to the zero address\""
															}
														],
														"id": 706,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															964,
															965
														],
														"referencedDeclaration": 965,
														"src": "10924:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 713,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10924:65:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 714,
												"nodeType": "ExpressionStatement",
												"src": "10924:65:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 716,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "11015:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 715,
														"name": "_clearApproval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 807,
														"src": "11000:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11000:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 718,
												"nodeType": "ExpressionStatement",
												"src": "11000:23:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 719,
																"name": "_ownedTokensCount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 279,
																"src": "11034:17:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$8_storage_$",
																	"typeString": "mapping(address => struct Counters.Counter storage ref)"
																}
															},
															"id": 721,
															"indexExpression": {
																"argumentTypes": null,
																"id": 720,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 690,
																"src": "11052:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11034:23:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$8_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 722,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decrement",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 47,
														"src": "11034:33:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$8_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$8_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11034:35:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 724,
												"nodeType": "ExpressionStatement",
												"src": "11034:35:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 725,
																"name": "_ownedTokensCount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 279,
																"src": "11079:17:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$8_storage_$",
																	"typeString": "mapping(address => struct Counters.Counter storage ref)"
																}
															},
															"id": 727,
															"indexExpression": {
																"argumentTypes": null,
																"id": 726,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 692,
																"src": "11097:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11079:21:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$8_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 728,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 31,
														"src": "11079:31:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$8_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$8_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11079:33:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 730,
												"nodeType": "ExpressionStatement",
												"src": "11079:33:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 731,
															"name": "_tokenOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 271,
															"src": "11123:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 733,
														"indexExpression": {
															"argumentTypes": null,
															"id": 732,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "11135:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11123:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 734,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 692,
														"src": "11146:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11123:25:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 736,
												"nodeType": "ExpressionStatement",
												"src": "11123:25:4"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 738,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 690,
															"src": "11173:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 739,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 692,
															"src": "11179:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 740,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "11183:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 737,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 821,
														"src": "11164:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11164:27:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 742,
												"nodeType": "EmitStatement",
												"src": "11159:32:4"
											}
										]
									},
									"documentation": "@dev Internal function to transfer ownership of a given token ID to another address.\nAs opposed to transferFrom, this imposes no restrictions on msg.sender.\n@param from current owner of the token\n@param to address to receive the ownership of the given token ID\n@param tokenId uint256 ID of the token to be transferred",
									"id": 744,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 690,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "10774:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 689,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10774:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 692,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "10788:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 691,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10788:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 694,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "10800:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10800:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "10773:43:4"
									},
									"returnParameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10826:0:4"
									},
									"scope": 808,
									"src": "10751:447:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 783,
										"nodeType": "Block",
										"src": "11902:216:4",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"id": 760,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "11916:16:4",
													"subExpression": {
														"argumentTypes": null,
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"argumentTypes": null,
																"id": 757,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 748,
																"src": "11917:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 758,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 945,
															"src": "11917:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 759,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11917:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 764,
												"nodeType": "IfStatement",
												"src": "11912:58:4",
												"trueBody": {
													"id": 763,
													"nodeType": "Block",
													"src": "11934:36:4",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "74727565",
																"id": 761,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11955:4:4",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 756,
															"id": 762,
															"nodeType": "Return",
															"src": "11948:11:4"
														}
													]
												}
											},
											{
												"assignments": [
													766
												],
												"declarations": [
													{
														"constant": false,
														"id": 766,
														"name": "retval",
														"nodeType": "VariableDeclaration",
														"scope": 783,
														"src": "11980:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"typeName": {
															"id": 765,
															"name": "bytes4",
															"nodeType": "ElementaryTypeName",
															"src": "11980:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 777,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 771,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 961,
																"src": "12033:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 772,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "12033:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 773,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 746,
															"src": "12045:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 774,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "12051:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 775,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 752,
															"src": "12060:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 768,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 748,
																	"src": "12012:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 767,
																"name": "IERC721Receiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 927,
																"src": "11996:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$927_$",
																	"typeString": "type(contract IERC721Receiver)"
																}
															},
															"id": 769,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11996:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721Receiver_$927",
																"typeString": "contract IERC721Receiver"
															}
														},
														"id": 770,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 926,
														"src": "11996:36:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
														}
													},
													"id": 776,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11996:70:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11980:86:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 778,
																"name": "retval",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 766,
																"src": "12084:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 779,
																"name": "_ERC721_RECEIVED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 267,
																"src": "12094:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "12084:26:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 781,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "12083:28:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 756,
												"id": 782,
												"nodeType": "Return",
												"src": "12076:35:4"
											}
										]
									},
									"documentation": "@dev Internal function to invoke `onERC721Received` on a target address.\nThe call is not executed if the target address is not a contract.\n     * This function is deprecated.\n@param from address representing the previous owner of the given token ID\n@param to target address that will receive the tokens\n@param tokenId uint256 ID of the token to be transferred\n@param _data bytes optional data to send along with the call\n@return bool whether the call correctly returned the expected magic value",
									"id": 784,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnERC721Received",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 746,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "11803:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 745,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11803:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 748,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "11817:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 747,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11817:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 750,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "11829:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 749,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11829:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 752,
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "11846:18:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 751,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11846:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "11802:63:4"
									},
									"returnParameters": {
										"id": 756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 755,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "11892:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 754,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11892:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "11891:6:4"
									},
									"scope": 808,
									"src": "11771:347:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 806,
										"nodeType": "Block",
										"src": "12329:122:4",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 789,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 275,
															"src": "12343:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 791,
														"indexExpression": {
															"argumentTypes": null,
															"id": 790,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 786,
															"src": "12359:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12343:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 793,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12379:1:4",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 792,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12371:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": "address"
														},
														"id": 794,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12371:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "12343:38:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 805,
												"nodeType": "IfStatement",
												"src": "12339:106:4",
												"trueBody": {
													"id": 804,
													"nodeType": "Block",
													"src": "12383:62:4",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 802,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 796,
																		"name": "_tokenApprovals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 275,
																		"src": "12397:15:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																			"typeString": "mapping(uint256 => address)"
																		}
																	},
																	"id": 798,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 797,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 786,
																		"src": "12413:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "12397:24:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"hexValue": "30",
																			"id": 800,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12432:1:4",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 799,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "12424:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": "address"
																	},
																	"id": 801,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "12424:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"src": "12397:37:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 803,
															"nodeType": "ExpressionStatement",
															"src": "12397:37:4"
														}
													]
												}
											}
										]
									},
									"documentation": "@dev Private function to clear current approval of a given token ID.\n@param tokenId uint256 ID of the token to be transferred",
									"id": 807,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_clearApproval",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 787,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 786,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "12304:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 785,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12304:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "12303:17:4"
									},
									"returnParameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12329:0:4"
									},
									"scope": 808,
									"src": "12280:171:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "private"
								}
							],
							"scope": 809,
							"src": "352:12101:4"
						}
					],
					"src": "0:12454:4"
				},
				"id": 4
			},
			"contract/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "contract/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC721": [
							911
						]
					},
					"id": 912,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 810,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:5"
						},
						{
							"absolutePath": "contract/introspection/IERC165.sol",
							"file": "../../introspection/IERC165.sol",
							"id": 811,
							"nodeType": "ImportDirective",
							"scope": 912,
							"sourceUnit": 111,
							"src": "25:41:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 812,
										"name": "IERC165",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 110,
										"src": "156:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC165_$110",
											"typeString": "contract IERC165"
										}
									},
									"id": 813,
									"nodeType": "InheritanceSpecifier",
									"src": "156:7:5"
								}
							],
							"contractDependencies": [
								110
							],
							"contractKind": "contract",
							"documentation": "@dev Required interface of an ERC721 compliant contract.",
							"fullyImplemented": false,
							"id": 911,
							"linearizedBaseContracts": [
								911,
								110
							],
							"name": "IERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": null,
									"id": 821,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 815,
												"indexed": true,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "185:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 814,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "185:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 817,
												"indexed": true,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "207:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 816,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "207:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 819,
												"indexed": true,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "227:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 818,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "227:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "184:67:5"
									},
									"src": "170:82:5"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 829,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 823,
												"indexed": true,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "272:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 822,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "272:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 825,
												"indexed": true,
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "295:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 824,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "295:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 827,
												"indexed": true,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "321:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 826,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "321:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "271:74:5"
									},
									"src": "257:89:5"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 837,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 831,
												"indexed": true,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "372:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 830,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "372:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 833,
												"indexed": true,
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "395:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 832,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "395:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 835,
												"indexed": false,
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "421:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 834,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "421:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "371:64:5"
									},
									"src": "351:85:5"
								},
								{
									"body": null,
									"documentation": "@dev Returns the number of NFTs in `owner`'s account.",
									"id": 844,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 839,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "538:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 838,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "538:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "537:15:5"
									},
									"returnParameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "574:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 841,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "574:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "573:17:5"
									},
									"scope": 911,
									"src": "519:72:5",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": "@dev Returns the owner of the NFT specified by `tokenId`.",
									"id": 851,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 851,
												"src": "695:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 845,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "695:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "694:17:5"
									},
									"returnParameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 851,
												"src": "733:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "732:15:5"
									},
									"scope": 911,
									"src": "678:70:5",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": "@dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\nanother (`to`).\n     * \n     * Requirements:\n- `from`, `to` cannot be zero.\n- `tokenId` must be owned by `from`.\n- If the caller is not `from`, it must be have been allowed to move this\nNFT by either `approve` or `setApproveForAll`.",
									"id": 860,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 853,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 860,
												"src": "1156:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 852,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1156:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 855,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 860,
												"src": "1170:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 854,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1170:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 857,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 860,
												"src": "1182:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 856,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1182:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1155:43:5"
									},
									"returnParameters": {
										"id": 859,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1205:0:5"
									},
									"scope": 911,
									"src": "1130:76:5",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": "@dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\nanother (`to`).\n     * Requirements:\n- If the caller is not `from`, it must be approved to move this NFT by\neither `approve` or `setApproveForAll`.",
									"id": 869,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 867,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1503:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1503:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 864,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1517:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 863,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1517:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 866,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1529:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 865,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1529:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1502:43:5"
									},
									"returnParameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1552:0:5"
									},
									"scope": 911,
									"src": "1481:72:5",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": null,
									"id": 876,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 871,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "1575:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 870,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1575:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 873,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "1587:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 872,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1587:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1574:29:5"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1610:0:5"
									},
									"scope": 911,
									"src": "1558:53:5",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": null,
									"id": 883,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 878,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "1637:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 877,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1637:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1636:17:5"
									},
									"returnParameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "1675:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 880,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1675:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1674:18:5"
									},
									"scope": 911,
									"src": "1616:77:5",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": null,
									"id": 890,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "1726:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 884,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1726:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 887,
												"name": "_approved",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "1744:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 886,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1744:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1725:34:5"
									},
									"returnParameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1766:0:5"
									},
									"scope": 911,
									"src": "1699:68:5",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": null,
									"id": 899,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "1798:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1798:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "1813:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 893,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1797:33:5"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "1852:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 896,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1852:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1851:6:5"
									},
									"scope": 911,
									"src": "1772:86:5",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": null,
									"id": 910,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 901,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "1891:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 900,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1891:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 903,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "1905:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 902,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1905:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 905,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "1917:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 904,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1917:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "1934:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 906,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1934:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1890:62:5"
									},
									"returnParameters": {
										"id": 909,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1959:0:5"
									},
									"scope": 911,
									"src": "1865:95:5",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 912,
							"src": "136:1826:5"
						}
					],
					"src": "0:1963:5"
				},
				"id": 5
			},
			"contract/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "contract/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							927
						]
					},
					"id": 928,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 913,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:6"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": "@title ERC721 token receiver interface\n@dev Interface for any contract that wants to support safeTransfers\nfrom ERC721 asset contracts.",
							"fullyImplemented": false,
							"id": 927,
							"linearizedBaseContracts": [
								927
							],
							"name": "IERC721Receiver",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": "@notice Handle the receipt of an NFT\n@dev The ERC721 smart contract calls this function on the recipient\nafter a `safeTransfer`. This function MUST return the function selector,\notherwise the caller will revert the transaction. The selector to be\nreturned can be obtained as `this.onERC721Received.selector`. This\nfunction MAY throw to revert and reject the transfer.\nNote: the ERC721 contract address is always the message sender.\n@param operator The address which called `safeTransferFrom` function\n@param from The address which previously owned the token\n@param tokenId The NFT identifier which is being transferred\n@param data Additional data with no specified format\n@return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`",
									"id": 926,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 915,
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "1093:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 914,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1093:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 917,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "1111:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 916,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1111:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 919,
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "1125:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 918,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1125:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 921,
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "1142:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 920,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1142:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1092:68:6"
									},
									"returnParameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "1181:6:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 923,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1181:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1180:8:6"
									},
									"scope": 927,
									"src": "1067:122:6",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 928,
							"src": "178:1013:6"
						}
					],
					"src": "0:1192:6"
				},
				"id": 6
			},
			"contract/utils/Address.sol": {
				"ast": {
					"absolutePath": "contract/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							946
						]
					},
					"id": 947,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 929,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:7"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@dev Collection of functions related to the address type,",
							"fullyImplemented": true,
							"id": 946,
							"linearizedBaseContracts": [
								946
							],
							"name": "Address",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 944,
										"nodeType": "Block",
										"src": "608:347:7",
										"statements": [
											{
												"assignments": [
													937
												],
												"declarations": [
													{
														"constant": false,
														"id": 937,
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 944,
														"src": "805:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 936,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "805:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 938,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "805:12:7"
											},
											{
												"externalReferences": [
													{
														"size": {
															"declaration": 937,
															"isOffset": false,
															"isSlot": false,
															"src": "894:4:7",
															"valueSize": 1
														}
													},
													{
														"account": {
															"declaration": 931,
															"isOffset": false,
															"isSlot": false,
															"src": "914:7:7",
															"valueSize": 1
														}
													}
												],
												"id": 939,
												"nodeType": "InlineAssembly",
												"operations": "{ size := extcodesize(account) }",
												"src": "883:41:7"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 942,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 940,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "940:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 941,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "947:1:7",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "940:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 935,
												"id": 943,
												"nodeType": "Return",
												"src": "933:15:7"
											}
										]
									},
									"documentation": "@dev Returns true if `account` is a contract.\n     * This test is non-exhaustive, and there may be false-negatives: during the\nexecution of a contract's constructor, its address will be reported as\nnot containing a contract.\n     * > It is unsafe to assume that an address for which this function returns\nfalse is an externally-owned account (EOA) and not a contract.",
									"id": 945,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 945,
												"src": "562:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "561:17:7"
									},
									"returnParameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 945,
												"src": "602:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 933,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "602:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "601:6:7"
									},
									"scope": 946,
									"src": "542:413:7",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 947,
							"src": "94:863:7"
						}
					],
					"src": "0:958:7"
				},
				"id": 7
			}
		}
	}
}